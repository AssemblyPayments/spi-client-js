{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/aes-js/index.js","webpack:///./node_modules/jssha/src/sha.js","webpack:///./src/Crypto.js","webpack:///./src/Messages.js","webpack:///./src/SpiModels.js","webpack:///./src/RequestIdHelper.js","webpack:///./src/Purchase.js","webpack:///./src/PayAtTable.js","webpack:///./src/SpiPayAtTable.js","webpack:///./src/Preauth.js","webpack:///./src/SpiPreauth.js","webpack:///./src/Pairing.js","webpack:///./src/PosInfo.js","webpack:///./src/PurchaseHelper.js","webpack:///./src/Secrets.js","webpack:///./src/KeyRollingHelper.js","webpack:///./src/PingHelper.js","webpack:///./src/Service/DeviceService.js","webpack:///./src/Spi.js","webpack:///./src/Logger.js","webpack:///./src/Printing.js","webpack:///./index.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","checkInt","parseInt","checkInts","arrayish","length","coerceArray","arg","copy","buffer","ArrayBuffer","isView","slice","Array","isArray","Error","Uint8Array","createArray","copyArray","sourceArray","targetArray","targetStart","sourceStart","sourceEnd","set","convertUtf8","toBytes","text","result","encodeURI","charCodeAt","push","substr","fromBytes","bytes","String","fromCharCode","join","convertHex","Hex","v","numberOfRounds","16","24","32","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","this","_prepare","rounds","_Ke","_Kd","index","roundKeyCount","KC","tk","tt","rconpointer","encrypt","plaintext","decrypt","ciphertext","ModeOfOperationECB","description","_aes","block","ModeOfOperationCBC","iv","_lastCipherblock","j","ModeOfOperationCFB","segmentSize","_shiftRegister","xorSegment","encrypted","ModeOfOperationOFB","_lastPrecipher","_lastPrecipherIndex","Counter","initialValue","_counter","setValue","setBytes","Number","MAX_SAFE_INTEGER","increment","ModeOfOperationCTR","counter","_remainingCounter","_remainingCounterIndex","aesjs","ModeOfOperation","ecb","cbc","cfb","ofb","ctr","utils","hex","utf8","padding","pkcs7","pad","data","padder","strip","_arrayTest","__WEBPACK_AMD_DEFINE_RESULT__","Y","C","b","g","f","q","u","e","h","I","w","y","z","x","encoding","numRounds","K","Z","lastIndexOf","L","k","F","D","M","A","setHMACKey","binLen","update","getHash","N","shakeLen","O","P","Q","R","getHMAC","charAt","outputUpper","toUpperCase","b64Pad","isNaN","search","indexOf","replace","byteLength","T","aa","ba","U","ca","da","ea","fa","ga","ha","ia","ja","ka","G","la","H","ma","na","oa","B","J","E","V","W","X","undefined","Crypto","_classCallCheck","_createClass","textBytes","encryptedBytes","decryptedBytes","messageToSign","shaObj","jsSHA","Events","SuccessState","Unknown","Success","Failed","MessageStamp","posId","secrets","serverTimeDelta","Messages_classCallCheck","PosId","Secrets","ServerTimeDelta","Message","id","eventName","needsEncryption","Id","EventName","Data","DateTimeStamp","IncommingHmac","_needsEncryption","DecryptedJson","Messages_createClass","success","error_reason","error_detail","now","Date","dts","split","getTime","stamp","tzoffset","getTimezoneOffset","adjustedTime","toISOString","envelope","message","event","datetime","pos_id","JSON","stringify","encMsg","AesEncrypt","EncKey","encrMessageEnvelope","enc","hmac","HmacSignature","HmacKey","bankDate","concat","date","time","msgJson","env","parse","decryptedJson","AesDecrypt","decryptedMsg","IncomingHmac","msg","SpiStatus","SpiFlow","TransactionType","InitiateTxResult","initiated","SpiModels_classCallCheck","Initiated","TransactionFlowState","posRefId","type","amountCents","PosRefId","Type","DisplayMessage","AmountCents","RequestSent","RequestTime","LastStateRequestTime","AttemptingToCancel","AwaitingSignatureCheck","AwaitingPhoneForAuth","Finished","Response","SignatureRequiredMessage","PhoneForAuthRequiredMessage","CancelAttemptTime","Request","AwaitingGltResponse","GLTResponsePosRefId","SpiModels_createClass","response","spiMessage","state","SpiConfig","PromptForCustomerCopyOnEftpos","SignatureFlowOnEftpos","PrintMerchantCopy","messageData","prompt_for_customer_copy","print_for_signature_required_transactions","print_merchant_copy","TransactionOptions","_customerReceiptHeader","_customerReceiptFooter","_merchantReceiptHeader","_merchantReceiptFooter","customerReceiptHeader","customerReceiptFooter","merchantReceiptHeader","merchantReceiptFooter","customer_receipt_header","customer_receipt_footer","merchant_receipt_header","merchant_receipt_footer","__RequestIdHelperCounter","RequestIdHelper","RequestIdHelper_classCallCheck","RequestIdHelper_createClass","prefix","PurchaseRequest","Purchase_classCallCheck","PurchaseAmount","TipAmount","CashoutAmount","PromptForCashout","SurchargeAmount","Config","Options","Purchase_createClass","toFixed","pos_ref_id","purchase_amount","tip_amount","cash_amount","prompt_for_cashout","surcharge_amount","addReceiptConfig","AddOptions","PurchaseResponse","_m","RequestId","SchemeName","scheme_name","SchemeAppName","GetSuccessState","rrn","bank_noncash_amount","bank_cash_amount","customer_receipt","merchant_receipt","host_response_text","host_response_code","terminal_ref_id","card_entry","account_type","auth_code","bank_date","bank_time","masked_pan","terminal_id","merchant_receipt_printed","customer_receipt_printed","dateStr","bank_settlement_date","ParseBankDate","attribute","GetAccountType","GetAuthCode","GetBankDate","GetBankTime","GetResponseCode","GetResponseText","GetMaskedPan","GetPurchaseAmount","GetRRN","GetTerminalId","GetTerminalReferenceId","GetTipAmount","GetSurchargeAmount","CancelTransactionRequest","CancelTransactionResponse","GetLastTransactionRequest","RefundRequest","refund_amount","SignatureRequired","_receiptToSign","requestId","receiptToSign","BillStatusResponse","PayAtTable_classCallCheck","Result","BillId","TableId","TotalAmount","OutstandingAmount","BillData","PayAtTable_createClass","map","bill","PaymentHistoryEntry","payment_type","payment_summary","messageId","BillRetrievalResult","SUCCESS","bill_id","table_id","bill_total_amount","bill_outstanding_amount","bill_payment_history","getBillPaymentHistory","toString","ph","INVALID_TABLE_ID","INVALID_BILL_ID","INVALID_OPERATOR_ID","paymentType","paymentSummary","PaymentType","PaymentSummary","PayAtTableConfig","PayAtTabledEnabled","OperatorIdEnabled","SplitByAmountEnabled","EqualSplitEnabled","TippingEnabled","SummaryReportEnabled","LabelPayButton","LabelOperatorId","LabelTableId","AllowedOperatorIds","pay_at_table_enabled","operator_id_enabled","split_by_amount_enabled","equal_split_enabled","tipping_enabled","summary_report_enabled","pay_button_label","operator_id_label","table_id_label","operator_id_list","SpiPayAtTable","spi","SpiPayAtTable_classCallCheck","_spi","_log","console","assign","SpiPayAtTable_createClass","billId","tableId","operatorId","Exception","billPayment","updatedBillData","_send","ToMessage","billStatus","GetBillStatus","info","BillPayment","_incomingAdvice","OperatorId","pt","purchaseMsg","existingBillStatus","warn","existingPaymentHistory","find","phe","GetTerminalRefId","updatedHistoryEntries","toLowerCase","ToPaymentSummary","ToBillData","updatedBillStatus","BillPaymentReceived","PreauthEvents","AccountVerifyRequest","Preauth_classCallCheck","Preauth_createClass","PreauthOpenRequest","PreauthAmount","preauth_amount","PreauthTopupRequest","preauthId","topupAmountCents","PreauthId","TopupAmount","preauth_id","topup_amount","PreauthPartialCancellationRequest","partialCancellationAmountCents","PartialCancellationAmount","preauth_cancel_amount","PreauthExtendRequest","PreauthCancelRequest","PreauthCompletionRequest","completionAmountCents","surchargeAmount","CompletionAmount","completion_amount","SpiPreauth","SpiPreauth_classCallCheck","SpiPreauth_createClass","verifyMsg","tfs","_initiatePreauthTx","sentMsg","CurrentStatus","Unpaired","CurrentFlow","Idle","Transaction","CurrentTxFlowState","Sent","document","dispatchEvent","CustomEvent","detail","_handleAccountVerifyResponse","_handlePreauthResponse","incomingPosRefId","currentTxFlowState","Completed","DropKeysRequest","Pairing_classCallCheck","Pairing_createClass","SetPosInfoRequest","version","vendorId","libraryLanguage","libraryVersion","otherInfo","PosInfo_classCallCheck","_version","_vendorId","_libraryLanguage","_libraryVersion","_otherInfo","PosInfo_createClass","pos_version","pos_vendor_id","library_language","library_version","other_info","PurchaseHelper","PurchaseHelper_classCallCheck","PurchaseHelper_createClass","purchaseId","purchaseAmount","tipAmount","cashoutAmount","promptForCashout","isSuppressMerchantPassword","encKey","hmacKey","Secrets_classCallCheck","Secrets_createClass","localStorage","setItem","getItem","removeItem","KeyRollingHelper","KeyRollingHelper_classCallCheck","KeyRollingHelper_createClass","krRequest","currentSecrets","status","newSecrets","GenerateHash","KeyRollingResult","keyRollingConfirmation","KeyRollingConfirmation","NewSecrets","PongHelper","PingHelper_classCallCheck","PingHelper_createClass","ping","PingHelper","DeviceIpAddressService","apiUrl","arguments","DeviceService_classCallCheck","ApiUrl","DeviceService_createClass","serialNumber","apiKey","deviceIpUrl","fetch","method","headers","ASM-MSP-DEVICE-ADDRESS-API-KEY","then","json","catch","error","StatusCode","ErrorException","Spi","eftposAddress","deviceIpAddressRequest","Spi_classCallCheck","_posId","_secrets","_eftposAddress","_serialNumber","SerialNumber","_deviceApiKey","ApiKey","_deviceApiUrl","CurrentDeviceStatus","AutoIpResolutionEnable","_spiMessageStamp","_posVendorId","_posVersion","_hasSetInfo","_mostRecentPingSent","_mostRecentPongReceived","_missedPongsCount","_retrySinceLastDeviceIpAddressResolution","_mostRecentLoginResponse","_pongTimeout","_pingFrequency","_readyToTransact","_periodicPingThread","_txMonitorCheckFrequency","_checkOnTxFrequency","_maxWaitForCancelTx","_missedPongsToDisconnect","_retryBeforeResolvingDeviceIpAddress","CurrentPairingFlowState","_currentStatus","_spiPat","_spiPreauth","Warn","_resetConn","_startTransactionMonitoringThread","_conn","Connect","address","Address","ResolveDeviceIpAddress","posVendorId","posVersion","PairingFlowState","AwaitingCheckFromEftpos","AwaitingCheckFromPos","ConfirmationCode","Successful","_onPairingSuccess","_onReadyToTransact","_onPairingFailed","_doUnpair","purchaseRequest","CreatePurchaseRequest","Purchase","options","purchase","CreatePurchaseRequestV2","AmountSummary","refundRequest","CreateRefundRequest","refundMsg","Refund","accepted","MidTxResult","SignatureResponded","SignatureAccept","SignatureDecline","authCode","SubmitAuthCodeResult","AuthCodeSent","AuthCodeAdvice","cancelReq","Cancelling","cashoutOnlyRequest","CashoutOnlyRequest","cashoutMsg","CashoutOnly","motoPurchaseRequest","MotoPurchaseRequest","MOTO","settleRequestMsg","SettleRequest","Settle","stlEnqMsg","SettlementEnquiryRequest","SettlementEnquiry","gltRequestMsg","GetLastTransaction","txType","gltResponse","GltMatch","GetPosRefId","payload","PrintingRequest","toMessage","TerminalStatusRequest","PairingHelper","GenerateSecretsAndKeyResponse","KeyRequest","KeyResponse","keyCheck","KeyCheck","pairResp","PairResponse","_startPeriodicPing","Info","Disconnect","krRes","PerformKeyRolling","phoneForAuthRequired","PhoneForAuthRequired","GetPhoneNumber","GetMerchantId","GetError","_callGetLastTransaction","txState","GotGltResponse","gtlResponse","GetLastTransactionResponse","WasRetrievedSuccessfully","CopyMerchantReceiptToCustomerReceipt","successState","UnknownCompleted","IsStillInProgress","IsWaitingForSignatureResponse","IsWaitingForAuthCode","WasTimeOutOfSyncError","cancelResponse","GetErrorReason","GetErrorDetail","CancelFailed","SetPosInfoResponse","isSuccess","getErrorReason","getErrorDetail","_this","needsPublishing","CallingGlt","setTimeout","PrintingResponse","TerminalStatusResponse","BatteryLevelChanged","_this2","Connection","addEventListener","_onSpiConnectionStatusChanged","_onSpiMessageReceived","_onWsErrorReceived","_this3","ConnectionState","Connecting","Connected","pr","NewPairRequest","Disconnected","_stopPeriodicPing","_this4","setInterval","_periodicPing","_this5","_doPing","_callSetPosInfo","PushPayAtTableConfig","setPosInfoRequest","GetVersion","DeviceInfo","GetAppDeviceInfo","clearInterval","GeneratePingRequest","_mostRecentPingSentTime","GetServerTimeDelta","debug","pong","GeneratePongRessponse","gltRequest","messageJson","FromJson","IsPreauthEvent","_handlePreauthMessage","_handleKeyRequest","_handleKeyCheck","_handlePairResponse","_handleDropKeysAdvice","_handlePurchaseResponse","_handleRefundResponse","_handleCashoutOnlyResponse","_handleMotoPurchaseResponse","_handleSignatureRequired","_handleAuthCodeRequired","_handleGetLastTransactionResponse","HandleSettleResponse","_handleSettlementEnquiryResponse","_handleIncomingPing","_handleIncomingPong","_handleKeyRollingRequest","_handleCancelTransactionResponse","_handleSetPosInfoResponse","FeatureDisableMessage","_handleGetTableConfig","_handleGetBillDetailsRequest","_handleBillPaymentAdvice","_handlePrintingResponse","_handleTerminalStatusResponse","_handleBatteryLevelChanged","_handleErrorEvent","ToJson","Send","_this6","RetrieveService","ip","Ip","DeviceIpAddressStatus","last_updated","Last_updated","Logger","element","Logger_classCallCheck","_len","args","_key","_render","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","log","innerText","scrollTop","scrollHeight","Printer","Printing_classCallCheck","Printing_createClass"],"mappings":"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","file":"spi-client-js.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function(root) {\n    \"use strict\";\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(aesjs);\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n","/*\n A JavaScript implementation of the SHA family of hashes, as\n defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding\n HMAC implementation as defined in FIPS PUB 198a\n\n Copyright Brian Turek 2008-2017\n Distributed under the BSD License\n See http://caligatio.github.com/jsSHA/ for more information\n\n Several functions taken from Paul Johnston\n*/\n'use strict';(function(Y){function C(c,a,b){var e=0,h=[],n=0,g,l,d,f,m,q,u,r,I=!1,v=[],w=[],t,y=!1,z=!1,x=-1;b=b||{};g=b.encoding||\"UTF8\";t=b.numRounds||1;if(t!==parseInt(t,10)||1>t)throw Error(\"numRounds must a integer >= 1\");if(\"SHA-1\"===c)m=512,q=K,u=Z,f=160,r=function(a){return a.slice()};else if(0===c.lastIndexOf(\"SHA-\",0))if(q=function(a,b){return L(a,b,c)},u=function(a,b,h,e){var k,f;if(\"SHA-224\"===c||\"SHA-256\"===c)k=(b+65>>>9<<4)+15,f=16;else if(\"SHA-384\"===c||\"SHA-512\"===c)k=(b+129>>>10<<\n5)+31,f=32;else throw Error(\"Unexpected error in SHA-2 implementation\");for(;a.length<=k;)a.push(0);a[b>>>5]|=128<<24-b%32;b=b+h;a[k]=b&4294967295;a[k-1]=b/4294967296|0;h=a.length;for(b=0;b<h;b+=f)e=L(a.slice(b,b+f),e,c);if(\"SHA-224\"===c)a=[e[0],e[1],e[2],e[3],e[4],e[5],e[6]];else if(\"SHA-256\"===c)a=e;else if(\"SHA-384\"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b];else if(\"SHA-512\"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,\ne[4].b,e[5].a,e[5].b,e[6].a,e[6].b,e[7].a,e[7].b];else throw Error(\"Unexpected error in SHA-2 implementation\");return a},r=function(a){return a.slice()},\"SHA-224\"===c)m=512,f=224;else if(\"SHA-256\"===c)m=512,f=256;else if(\"SHA-384\"===c)m=1024,f=384;else if(\"SHA-512\"===c)m=1024,f=512;else throw Error(\"Chosen SHA variant is not supported\");else if(0===c.lastIndexOf(\"SHA3-\",0)||0===c.lastIndexOf(\"SHAKE\",0)){var F=6;q=D;r=function(a){var c=[],e;for(e=0;5>e;e+=1)c[e]=a[e].slice();return c};x=1;if(\"SHA3-224\"===\nc)m=1152,f=224;else if(\"SHA3-256\"===c)m=1088,f=256;else if(\"SHA3-384\"===c)m=832,f=384;else if(\"SHA3-512\"===c)m=576,f=512;else if(\"SHAKE128\"===c)m=1344,f=-1,F=31,z=!0;else if(\"SHAKE256\"===c)m=1088,f=-1,F=31,z=!0;else throw Error(\"Chosen SHA variant is not supported\");u=function(a,c,e,b,h){e=m;var k=F,f,g=[],n=e>>>5,l=0,d=c>>>5;for(f=0;f<d&&c>=e;f+=n)b=D(a.slice(f,f+n),b),c-=e;a=a.slice(f);for(c%=e;a.length<n;)a.push(0);f=c>>>3;a[f>>2]^=k<<f%4*8;a[n-1]^=2147483648;for(b=D(a,b);32*g.length<h;){a=b[l%\n5][l/5|0];g.push(a.b);if(32*g.length>=h)break;g.push(a.a);l+=1;0===64*l%e&&D(null,b)}return g}}else throw Error(\"Chosen SHA variant is not supported\");d=M(a,g,x);l=A(c);this.setHMACKey=function(a,b,h){var k;if(!0===I)throw Error(\"HMAC key already set\");if(!0===y)throw Error(\"Cannot set HMAC key after calling update\");if(!0===z)throw Error(\"SHAKE is not supported for HMAC\");g=(h||{}).encoding||\"UTF8\";b=M(b,g,x)(a);a=b.binLen;b=b.value;k=m>>>3;h=k/4-1;if(k<a/8){for(b=u(b,a,0,A(c),f);b.length<=h;)b.push(0);\nb[h]&=4294967040}else if(k>a/8){for(;b.length<=h;)b.push(0);b[h]&=4294967040}for(a=0;a<=h;a+=1)v[a]=b[a]^909522486,w[a]=b[a]^1549556828;l=q(v,l);e=m;I=!0};this.update=function(a){var c,b,k,f=0,g=m>>>5;c=d(a,h,n);a=c.binLen;b=c.value;c=a>>>5;for(k=0;k<c;k+=g)f+m<=a&&(l=q(b.slice(k,k+g),l),f+=m);e+=f;h=b.slice(f>>>5);n=a%m;y=!0};this.getHash=function(a,b){var k,g,d,m;if(!0===I)throw Error(\"Cannot call getHash after setting HMAC key\");d=N(b);if(!0===z){if(-1===d.shakeLen)throw Error(\"shakeLen must be specified in options\");\nf=d.shakeLen}switch(a){case \"HEX\":k=function(a){return O(a,f,x,d)};break;case \"B64\":k=function(a){return P(a,f,x,d)};break;case \"BYTES\":k=function(a){return Q(a,f,x)};break;case \"ARRAYBUFFER\":try{g=new ArrayBuffer(0)}catch(p){throw Error(\"ARRAYBUFFER not supported by this environment\");}k=function(a){return R(a,f,x)};break;default:throw Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\");}m=u(h.slice(),n,e,r(l),f);for(g=1;g<t;g+=1)!0===z&&0!==f%32&&(m[m.length-1]&=16777215>>>24-f%32),m=u(m,f,\n0,A(c),f);return k(m)};this.getHMAC=function(a,b){var k,g,d,p;if(!1===I)throw Error(\"Cannot call getHMAC without first setting HMAC key\");d=N(b);switch(a){case \"HEX\":k=function(a){return O(a,f,x,d)};break;case \"B64\":k=function(a){return P(a,f,x,d)};break;case \"BYTES\":k=function(a){return Q(a,f,x)};break;case \"ARRAYBUFFER\":try{k=new ArrayBuffer(0)}catch(v){throw Error(\"ARRAYBUFFER not supported by this environment\");}k=function(a){return R(a,f,x)};break;default:throw Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\");\n}g=u(h.slice(),n,e,r(l),f);p=q(w,A(c));p=u(g,f,m,p,f);return k(p)}}function b(c,a){this.a=c;this.b=a}function O(c,a,b,e){var h=\"\";a/=8;var n,g,d;d=-1===b?3:0;for(n=0;n<a;n+=1)g=c[n>>>2]>>>8*(d+n%4*b),h+=\"0123456789abcdef\".charAt(g>>>4&15)+\"0123456789abcdef\".charAt(g&15);return e.outputUpper?h.toUpperCase():h}function P(c,a,b,e){var h=\"\",n=a/8,g,d,p,f;f=-1===b?3:0;for(g=0;g<n;g+=3)for(d=g+1<n?c[g+1>>>2]:0,p=g+2<n?c[g+2>>>2]:0,p=(c[g>>>2]>>>8*(f+g%4*b)&255)<<16|(d>>>8*(f+(g+1)%4*b)&255)<<8|p>>>8*(f+\n(g+2)%4*b)&255,d=0;4>d;d+=1)8*g+6*d<=a?h+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(p>>>6*(3-d)&63):h+=e.b64Pad;return h}function Q(c,a,b){var e=\"\";a/=8;var h,d,g;g=-1===b?3:0;for(h=0;h<a;h+=1)d=c[h>>>2]>>>8*(g+h%4*b)&255,e+=String.fromCharCode(d);return e}function R(c,a,b){a/=8;var e,h=new ArrayBuffer(a),d,g;g=new Uint8Array(h);d=-1===b?3:0;for(e=0;e<a;e+=1)g[e]=c[e>>>2]>>>8*(d+e%4*b)&255;return h}function N(c){var a={outputUpper:!1,b64Pad:\"=\",shakeLen:-1};c=c||{};\na.outputUpper=c.outputUpper||!1;!0===c.hasOwnProperty(\"b64Pad\")&&(a.b64Pad=c.b64Pad);if(!0===c.hasOwnProperty(\"shakeLen\")){if(0!==c.shakeLen%8)throw Error(\"shakeLen must be a multiple of 8\");a.shakeLen=c.shakeLen}if(\"boolean\"!==typeof a.outputUpper)throw Error(\"Invalid outputUpper formatting option\");if(\"string\"!==typeof a.b64Pad)throw Error(\"Invalid b64Pad formatting option\");return a}function M(c,a,b){switch(a){case \"UTF8\":case \"UTF16BE\":case \"UTF16LE\":break;default:throw Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n}switch(c){case \"HEX\":c=function(a,c,d){var g=a.length,l,p,f,m,q,u;if(0!==g%2)throw Error(\"String of HEX type must be in byte increments\");c=c||[0];d=d||0;q=d>>>3;u=-1===b?3:0;for(l=0;l<g;l+=2){p=parseInt(a.substr(l,2),16);if(isNaN(p))throw Error(\"String of HEX type contains invalid characters\");m=(l>>>1)+q;for(f=m>>>2;c.length<=f;)c.push(0);c[f]|=p<<8*(u+m%4*b)}return{value:c,binLen:4*g+d}};break;case \"TEXT\":c=function(c,h,d){var g,l,p=0,f,m,q,u,r,t;h=h||[0];d=d||0;q=d>>>3;if(\"UTF8\"===a)for(t=-1===\nb?3:0,f=0;f<c.length;f+=1)for(g=c.charCodeAt(f),l=[],128>g?l.push(g):2048>g?(l.push(192|g>>>6),l.push(128|g&63)):55296>g||57344<=g?l.push(224|g>>>12,128|g>>>6&63,128|g&63):(f+=1,g=65536+((g&1023)<<10|c.charCodeAt(f)&1023),l.push(240|g>>>18,128|g>>>12&63,128|g>>>6&63,128|g&63)),m=0;m<l.length;m+=1){r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=l[m]<<8*(t+r%4*b);p+=1}else if(\"UTF16BE\"===a||\"UTF16LE\"===a)for(t=-1===b?2:0,l=\"UTF16LE\"===a&&1!==b||\"UTF16LE\"!==a&&1===b,f=0;f<c.length;f+=1){g=c.charCodeAt(f);\n!0===l&&(m=g&255,g=m<<8|g>>>8);r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=g<<8*(t+r%4*b);p+=2}return{value:h,binLen:8*p+d}};break;case \"B64\":c=function(a,c,d){var g=0,l,p,f,m,q,u,r,t;if(-1===a.search(/^[a-zA-Z0-9=+\\/]+$/))throw Error(\"Invalid character in base-64 string\");p=a.indexOf(\"=\");a=a.replace(/\\=/g,\"\");if(-1!==p&&p<a.length)throw Error(\"Invalid '=' found in base-64 string\");c=c||[0];d=d||0;u=d>>>3;t=-1===b?3:0;for(p=0;p<a.length;p+=4){q=a.substr(p,4);for(f=m=0;f<q.length;f+=1)l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(q[f]),\nm|=l<<18-6*f;for(f=0;f<q.length-1;f+=1){r=g+u;for(l=r>>>2;c.length<=l;)c.push(0);c[l]|=(m>>>16-8*f&255)<<8*(t+r%4*b);g+=1}}return{value:c,binLen:8*g+d}};break;case \"BYTES\":c=function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;p=d>>>3;q=-1===b?3:0;for(l=0;l<a.length;l+=1)g=a.charCodeAt(l),m=l+p,f=m>>>2,c.length<=f&&c.push(0),c[f]|=g<<8*(q+m%4*b);return{value:c,binLen:8*a.length+d}};break;case \"ARRAYBUFFER\":try{c=new ArrayBuffer(0)}catch(e){throw Error(\"ARRAYBUFFER not supported by this environment\");}c=\nfunction(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;l=d>>>3;m=-1===b?3:0;q=new Uint8Array(a);for(g=0;g<a.byteLength;g+=1)f=g+l,p=f>>>2,c.length<=p&&c.push(0),c[p]|=q[g]<<8*(m+f%4*b);return{value:c,binLen:8*a.byteLength+d}};break;default:throw Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\");}return c}function y(c,a){return c<<a|c>>>32-a}function S(c,a){return 32<a?(a-=32,new b(c.b<<a|c.a>>>32-a,c.a<<a|c.b>>>32-a)):0!==a?new b(c.a<<a|c.b>>>32-a,c.b<<a|c.a>>>32-a):c}function w(c,a){return c>>>\na|c<<32-a}function t(c,a){var k=null,k=new b(c.a,c.b);return k=32>=a?new b(k.a>>>a|k.b<<32-a&4294967295,k.b>>>a|k.a<<32-a&4294967295):new b(k.b>>>a-32|k.a<<64-a&4294967295,k.a>>>a-32|k.b<<64-a&4294967295)}function T(c,a){var k=null;return k=32>=a?new b(c.a>>>a,c.b>>>a|c.a<<32-a&4294967295):new b(0,c.a>>>a-32)}function aa(c,a,b){return c&a^~c&b}function ba(c,a,k){return new b(c.a&a.a^~c.a&k.a,c.b&a.b^~c.b&k.b)}function U(c,a,b){return c&a^c&b^a&b}function ca(c,a,k){return new b(c.a&a.a^c.a&k.a^a.a&\nk.a,c.b&a.b^c.b&k.b^a.b&k.b)}function da(c){return w(c,2)^w(c,13)^w(c,22)}function ea(c){var a=t(c,28),k=t(c,34);c=t(c,39);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function fa(c){return w(c,6)^w(c,11)^w(c,25)}function ga(c){var a=t(c,14),k=t(c,18);c=t(c,41);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ha(c){return w(c,7)^w(c,18)^c>>>3}function ia(c){var a=t(c,1),k=t(c,8);c=T(c,7);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ja(c){return w(c,17)^w(c,19)^c>>>10}function ka(c){var a=t(c,19),k=t(c,61);\nc=T(c,6);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function G(c,a){var b=(c&65535)+(a&65535);return((c>>>16)+(a>>>16)+(b>>>16)&65535)<<16|b&65535}function la(c,a,b,e){var h=(c&65535)+(a&65535)+(b&65535)+(e&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)&65535)<<16|h&65535}function H(c,a,b,e,h){var d=(c&65535)+(a&65535)+(b&65535)+(e&65535)+(h&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)+(d>>>16)&65535)<<16|d&65535}function ma(c,a){var d,e,h;d=(c.b&65535)+(a.b&65535);e=(c.b>>>16)+\n(a.b>>>16)+(d>>>16);h=(e&65535)<<16|d&65535;d=(c.a&65535)+(a.a&65535)+(e>>>16);e=(c.a>>>16)+(a.a>>>16)+(d>>>16);return new b((e&65535)<<16|d&65535,h)}function na(c,a,d,e){var h,n,g;h=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535);n=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h>>>16);g=(n&65535)<<16|h&65535;h=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(n>>>16);n=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h>>>16);return new b((n&65535)<<16|h&65535,g)}function oa(c,a,d,e,h){var n,g,l;n=(c.b&\n65535)+(a.b&65535)+(d.b&65535)+(e.b&65535)+(h.b&65535);g=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h.b>>>16)+(n>>>16);l=(g&65535)<<16|n&65535;n=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(h.a&65535)+(g>>>16);g=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h.a>>>16)+(n>>>16);return new b((g&65535)<<16|n&65535,l)}function B(c,a){return new b(c.a^a.a,c.b^a.b)}function A(c){var a=[],d;if(\"SHA-1\"===c)a=[1732584193,4023233417,2562383102,271733878,3285377520];else if(0===c.lastIndexOf(\"SHA-\",0))switch(a=\n[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case \"SHA-224\":break;case \"SHA-256\":a=d;break;case \"SHA-384\":a=[new b(3418070365,a[0]),new b(1654270250,a[1]),new b(2438529370,a[2]),new b(355462360,a[3]),new b(1731405415,a[4]),new b(41048885895,a[5]),new b(3675008525,a[6]),new b(1203062813,a[7])];break;case \"SHA-512\":a=[new b(d[0],4089235720),new b(d[1],2227873595),\nnew b(d[2],4271175723),new b(d[3],1595750129),new b(d[4],2917565137),new b(d[5],725511199),new b(d[6],4215389547),new b(d[7],327033209)];break;default:throw Error(\"Unknown SHA variant\");}else if(0===c.lastIndexOf(\"SHA3-\",0)||0===c.lastIndexOf(\"SHAKE\",0))for(c=0;5>c;c+=1)a[c]=[new b(0,0),new b(0,0),new b(0,0),new b(0,0),new b(0,0)];else throw Error(\"No SHA variants supported\");return a}function K(c,a){var b=[],e,d,n,g,l,p,f;e=a[0];d=a[1];n=a[2];g=a[3];l=a[4];for(f=0;80>f;f+=1)b[f]=16>f?c[f]:y(b[f-\n3]^b[f-8]^b[f-14]^b[f-16],1),p=20>f?H(y(e,5),d&n^~d&g,l,1518500249,b[f]):40>f?H(y(e,5),d^n^g,l,1859775393,b[f]):60>f?H(y(e,5),U(d,n,g),l,2400959708,b[f]):H(y(e,5),d^n^g,l,3395469782,b[f]),l=g,g=n,n=y(d,30),d=e,e=p;a[0]=G(e,a[0]);a[1]=G(d,a[1]);a[2]=G(n,a[2]);a[3]=G(g,a[3]);a[4]=G(l,a[4]);return a}function Z(c,a,b,e){var d;for(d=(a+65>>>9<<4)+15;c.length<=d;)c.push(0);c[a>>>5]|=128<<24-a%32;a+=b;c[d]=a&4294967295;c[d-1]=a/4294967296|0;a=c.length;for(d=0;d<a;d+=16)e=K(c.slice(d,d+16),e);return e}function L(c,\na,k){var e,h,n,g,l,p,f,m,q,u,r,t,v,w,y,A,z,x,F,B,C,D,E=[],J;if(\"SHA-224\"===k||\"SHA-256\"===k)u=64,t=1,D=Number,v=G,w=la,y=H,A=ha,z=ja,x=da,F=fa,C=U,B=aa,J=d;else if(\"SHA-384\"===k||\"SHA-512\"===k)u=80,t=2,D=b,v=ma,w=na,y=oa,A=ia,z=ka,x=ea,F=ga,C=ca,B=ba,J=V;else throw Error(\"Unexpected error in SHA-2 implementation\");k=a[0];e=a[1];h=a[2];n=a[3];g=a[4];l=a[5];p=a[6];f=a[7];for(r=0;r<u;r+=1)16>r?(q=r*t,m=c.length<=q?0:c[q],q=c.length<=q+1?0:c[q+1],E[r]=new D(m,q)):E[r]=w(z(E[r-2]),E[r-7],A(E[r-15]),E[r-\n16]),m=y(f,F(g),B(g,l,p),J[r],E[r]),q=v(x(k),C(k,e,h)),f=p,p=l,l=g,g=v(n,m),n=h,h=e,e=k,k=v(m,q);a[0]=v(k,a[0]);a[1]=v(e,a[1]);a[2]=v(h,a[2]);a[3]=v(n,a[3]);a[4]=v(g,a[4]);a[5]=v(l,a[5]);a[6]=v(p,a[6]);a[7]=v(f,a[7]);return a}function D(c,a){var d,e,h,n,g=[],l=[];if(null!==c)for(e=0;e<c.length;e+=2)a[(e>>>1)%5][(e>>>1)/5|0]=B(a[(e>>>1)%5][(e>>>1)/5|0],new b(c[e+1],c[e]));for(d=0;24>d;d+=1){n=A(\"SHA3-\");for(e=0;5>e;e+=1){h=a[e][0];var p=a[e][1],f=a[e][2],m=a[e][3],q=a[e][4];g[e]=new b(h.a^p.a^f.a^\nm.a^q.a,h.b^p.b^f.b^m.b^q.b)}for(e=0;5>e;e+=1)l[e]=B(g[(e+4)%5],S(g[(e+1)%5],1));for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(a[e][h],l[e]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)n[h][(2*e+3*h)%5]=S(a[e][h],W[e][h]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(n[e][h],new b(~n[(e+1)%5][h].a&n[(e+2)%5][h].a,~n[(e+1)%5][h].b&n[(e+2)%5][h].b));a[0][0]=B(a[0][0],X[d])}return a}var d,V,W,X;d=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,\n1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,\n2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];V=[new b(d[0],3609767458),new b(d[1],602891725),new b(d[2],3964484399),new b(d[3],2173295548),new b(d[4],4081628472),new b(d[5],3053834265),new b(d[6],2937671579),new b(d[7],3664609560),new b(d[8],2734883394),new b(d[9],1164996542),new b(d[10],1323610764),new b(d[11],3590304994),new b(d[12],4068182383),new b(d[13],991336113),new b(d[14],633803317),new b(d[15],3479774868),new b(d[16],2666613458),new b(d[17],944711139),new b(d[18],2341262773),\nnew b(d[19],2007800933),new b(d[20],1495990901),new b(d[21],1856431235),new b(d[22],3175218132),new b(d[23],2198950837),new b(d[24],3999719339),new b(d[25],766784016),new b(d[26],2566594879),new b(d[27],3203337956),new b(d[28],1034457026),new b(d[29],2466948901),new b(d[30],3758326383),new b(d[31],168717936),new b(d[32],1188179964),new b(d[33],1546045734),new b(d[34],1522805485),new b(d[35],2643833823),new b(d[36],2343527390),new b(d[37],1014477480),new b(d[38],1206759142),new b(d[39],344077627),\nnew b(d[40],1290863460),new b(d[41],3158454273),new b(d[42],3505952657),new b(d[43],106217008),new b(d[44],3606008344),new b(d[45],1432725776),new b(d[46],1467031594),new b(d[47],851169720),new b(d[48],3100823752),new b(d[49],1363258195),new b(d[50],3750685593),new b(d[51],3785050280),new b(d[52],3318307427),new b(d[53],3812723403),new b(d[54],2003034995),new b(d[55],3602036899),new b(d[56],1575990012),new b(d[57],1125592928),new b(d[58],2716904306),new b(d[59],442776044),new b(d[60],593698344),new b(d[61],\n3733110249),new b(d[62],2999351573),new b(d[63],3815920427),new b(3391569614,3928383900),new b(3515267271,566280711),new b(3940187606,3454069534),new b(4118630271,4000239992),new b(116418474,1914138554),new b(174292421,2731055270),new b(289380356,3203993006),new b(460393269,320620315),new b(685471733,587496836),new b(852142971,1086792851),new b(1017036298,365543100),new b(1126000580,2618297676),new b(1288033470,3409855158),new b(1501505948,4234509866),new b(1607167915,987167468),new b(1816402316,\n1246189591)];X=[new b(0,1),new b(0,32898),new b(2147483648,32906),new b(2147483648,2147516416),new b(0,32907),new b(0,2147483649),new b(2147483648,2147516545),new b(2147483648,32777),new b(0,138),new b(0,136),new b(0,2147516425),new b(0,2147483658),new b(0,2147516555),new b(2147483648,139),new b(2147483648,32905),new b(2147483648,32771),new b(2147483648,32770),new b(2147483648,128),new b(0,32778),new b(2147483648,2147483658),new b(2147483648,2147516545),new b(2147483648,32896),new b(0,2147483649),\nnew b(2147483648,2147516424)];W=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];\"function\"===typeof define&&define.amd?define(function(){return C}):\"undefined\"!==typeof exports?(\"undefined\"!==typeof module&&module.exports&&(module.exports=C),exports=C):Y.jsSHA=C})(this);\n","import jsSHA from 'jssha';\nimport aesjs from 'aes-js';\n\nexport class Crypto {\n    \n    constructor() {\n\n    }\n\n    // <summary>\n    // Encrypt a block using CBC and PKCS7.\n    // </summary>\n    // <param name=\"key\">The key value</param>\n    // <param name=\"data\">The message to encrypt</param>\n    // <returns>Returns the resulting encrypted string data as HEX.</returns>\n    static AesEncrypt (key, data) {\n        let bytes = aesjs.utils.hex.toBytes(key);\n        const iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];\n        const textBytes = aesjs.padding.pkcs7.pad(aesjs.utils.utf8.toBytes(data));\n        const aesCbc = new aesjs.ModeOfOperation.cbc(bytes, iv);\n        const encryptedBytes = aesCbc.encrypt(textBytes);\n        const encryptedString = aesjs.utils.hex.fromBytes(encryptedBytes);\n\n        return encryptedString;\n    }\n    \n    // <summary>\n    // Decrypt a block using a CBC and PKCS7.\n    // </summary>\n    // <param name=\"key\">The key value</param>\n    // <param name=\"data\">the data to decrypt</param>\n    // <returns>Returns the resulting data decrypted in plaintext.</returns>\n    static AesDecrypt(key, data) {\n        let bytes = aesjs.utils.hex.toBytes(key);\n        const iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];\n        const encryptedBytes = aesjs.utils.hex.toBytes(data);\n        const aesCbc = new aesjs.ModeOfOperation.cbc(bytes, iv);\n        const decryptedBytes = aesCbc.decrypt(encryptedBytes);\n        const decrypted = aesjs.utils.utf8.fromBytes(aesjs.padding.pkcs7.strip(decryptedBytes));\n    \n        return decrypted;\n    }\n\n    // <summary>\n    // Calculates the HMACSHA256 signature of a message.\n    // </summary>\n    // <param name=\"key\">The Hmac Key as HEX</param>\n    // <param name=\"messageToSign\">The message to sign</param>\n    // <returns>The HMACSHA256 signature as a hex string</returns>\n    static HmacSignature(key, messageToSign) {\n        let shaObj = new jsSHA(\"SHA-256\", \"TEXT\");\n\n        shaObj.setHMACKey(key,'HEX');\n        shaObj.update(messageToSign);\n        \n        return shaObj.getHMAC(\"HEX\");\n    }\n\n\n    /**\n     * This utility function calculates the SHA-256 value in hexadecimal format\n     * @param {String} value the value to be hashed\n     */\n    static GenerateHash(value) {\n        let shaObj = new jsSHA('SHA-256', 'HEX');\n        shaObj.update(value);\n        const shaHash = shaObj.getHash('HEX');\n        return shaHash;\n    }\n}\n","import {Crypto} from './Crypto';\n\n// <summary>\n// Events statically declares the various event names in messages.\n// </summary>\nexport const Events = {\n     PairRequest : \"pair_request\",\n     KeyRequest : \"key_request\",\n     KeyResponse : \"key_response\",\n     KeyCheck : \"key_check\",\n     PairResponse : \"pair_response\",\n     DropKeysAdvice : \"drop_keys\",\n\n     LoginRequest : \"login_request\",\n     LoginResponse : \"login_response\",\n\n     Ping : \"ping\",\n     Pong : \"pong\",\n\n     PurchaseRequest : \"purchase\",\n     PurchaseResponse : \"purchase_response\",\n     CancelTransactionRequest : \"cancel_transaction\",\n     CancelTransactionResponse : \"cancel_response\",\n     GetLastTransactionRequest : \"get_last_transaction\",\n     GetLastTransactionResponse : \"last_transaction\",\n     RefundRequest : \"refund\",\n     RefundResponse : \"refund_response\",\n     SignatureRequired : \"signature_required\",\n     SignatureDeclined : \"signature_decline\",\n     SignatureAccepted : \"signature_accept\",\n     AuthCodeRequired : \"authorisation_code_required\",\n     AuthCodeAdvice : \"authorisation_code_advice\",\n\n     CashoutOnlyRequest : \"cash\",\n     CashoutOnlyResponse : \"cash_response\",\n\n     MotoPurchaseRequest : \"moto_purchase\",\n     MotoPurchaseResponse : \"moto_purchase_response\",\n\n     SettleRequest : \"settle\",\n     SettleResponse : \"settle_response\",\n     SettlementEnquiryRequest : \"settlement_enquiry\",\n     SettlementEnquiryResponse : \"settlement_enquiry_response\",\n\n     SetPosInfoRequest : \"set_pos_info\",\n     SetPosInfoResponse : \"set_pos_info_response\",\n\n     KeyRollRequest : \"request_use_next_keys\",\n     KeyRollResponse : \"response_use_next_keys\",\n\n     Error : \"error\",\n    \n     InvalidHmacSignature : \"_INVALID_SIGNATURE_\",\n\n    // Pay At Table Related Messages\n    PayAtTableGetTableConfig : \"get_table_config\", // incoming. When eftpos wants to ask us for P@T configuration.\n    PayAtTableSetTableConfig : \"set_table_config\", // outgoing. When we want to instruct eftpos with the P@T configuration.\n    PayAtTableGetBillDetails : \"get_bill_details\", // incoming. When eftpos wants to aretrieve the bill for a table.\n    PayAtTableBillDetails : \"bill_details\",        // outgoing. We reply with this when eftpos requests to us get_bill_details.\n    PayAtTableBillPayment : \"bill_payment\",        // incoming. When the eftpos advices \n\n    PrintingRequest : \"print\",\n    PrintingResponse : \"print_response\",\n\n    TerminalStatusRequest : \"get_terminal_status\",\n    TerminalStatusResponse : \"terminal_status\",\n\n    BatteryLevelChanged : \"battery_level_changed\"\n};\n\nexport const SuccessState = {\n    Unknown: 'Unknown', Success: 'Success', Failed: 'Failed'\n};\n\n// <summary>\n// MessageStamp represents what is required to turn an outgoing Message into Json\n// including encryption and date setting.\n// </summary>\nexport class MessageStamp {\n    constructor(posId, secrets, serverTimeDelta) {\n        this.PosId = posId;\n        this.Secrets = secrets;\n        this.ServerTimeDelta = serverTimeDelta;\n    }\n}\n\n// <summary>\n// MessageEnvelope represents the outer structure of any message that is exchanged\n// between the Pos and the PinPad and vice-versa.\n// See http://www.simplepaymentapi.com/#/api/message-encryption\n// </summary>\nexport class MessageEnvelope {\n    constructor(message, enc, hmac, posId) {\n        // <summary>\n        // The Message field is set only when in Un-encrypted form.\n        // In fact it is the only field in an envelope in the Un-Encrypted form.\n        // </summary>\n        this.Message = message;\n\n        // <summary>\n        // The enc field is set only when in Encrypted form.\n        // It contains the encrypted Json of another MessageEnvelope \n        // </summary>\n        this.Enc = enc;\n\n        // <summary>\n        // The hmac field is set only when in Encrypted form.\n        // It is the signature of the \"enc\" field.\n        // </summary>\n        this.Hmac = hmac;\n\n        // <summary>\n        // The pos_id field is only filled for outgoing Encrypted messages.\n        // </summary>\n        this.PosId = posId;\n    }\n\n    toJSON() {\n        return {\n            message: this.Message,\n            enc: this.Enc,\n            hmac: this.Hmac,\n            pos_id: this.PosId\n        }\n    }\n}\n\n// <summary>\n// Message represents the contents of a Message.\n// See http://www.simplepaymentapi.com/#/api/message-encryption\n// </summary>\nexport class Message {\n    constructor(id, eventName, data, needsEncryption) {\n        this.Id = id;\n        this.EventName = eventName;\n        this.Data = data;\n        this.DateTimeStamp = '';\n        this.PosId = ''; // Pos_id is set here only for outgoing Un-encrypted messages. \n        this.IncommingHmac = ''; // Sometimes the logic around the incoming message might need access to the sugnature, for example in the key_check.\n        this._needsEncryption = needsEncryption; // Denotes whether an outgoing message needs to be encrypted in ToJson()\n        this.DecryptedJson = ''; // Set on an incoming message just so you can have a look at what it looked like in its json form.\n    }\n\n    GetSuccessState() {\n        if(!this.Data || typeof this.Data.success === \"undefined\") {\n            return SuccessState.Unknown;\n        }\n\n        return this.Data.success ? SuccessState.Success : SuccessState.Failed;\n    }\n\n    GetError() {\n        return this.Data.error_reason ? this.Data.error_reason : \"\";\n    }\n\n    GetErrorDetail() {\n        return this.Data.error_detail;\n    }\n\n    GetServerTimeDelta()\n    {\n        let now = Date.now();\n        \n        // Stamp format: 2018-04-19T01:42:38.279\n        let dts = this.DateTimeStamp.split(/[\\-\\+\\. :T]/);\n        let msgTime = new Date(\n            // year, month, date\n            dts[0], dts[1] - 1, dts[2],\n            // hour, minute, second, millis\n            dts[3], dts[4], dts[5], dts[6]\n        ).getTime(); // Local time zone\n\n        return msgTime - now;\n    }\n\n    // Helper method to parse bank date format 20042018 (ddMMyyyy)\n    static ParseBankDate(bankDate) {\n        if(bankDate.length !== 8) return null;\n\n        return new Date(`${bankDate.substr(4,4)}-${bankDate.substr(2,2)}-${bankDate.substr(0,2)}`);\n    }\n\n    // Parses a bank date & time str from \"05Oct17\" / \"05:00\" (\"ddMMMyy/HH:mm\") into date obj\n    static ParseBankDateTimeStr(date, time) {\n        return new Date(`${date.substr(0,2)} ${date.substr(2,3)} ${date.substr(5,2)} ${time}`);\n    }\n\n    static FromJson(msgJson, secrets) {\n        let env = JSON.parse(msgJson);\n\n        if(env.message != null) {\n            let message = new Message(env.message.id, env.message.event, env.message.data, false);\n            message.DecryptedJson = msgJson;\n            return message;\n        }\n\n        if (secrets == null)\n        {\n            // This may happen if we somehow received an encrypted message from eftpos but we're not configered with secrets.\n            // For example, if we cancel the pairing process a little late in the game and we get an encrypted key_check message after we've dropped the keys.\n            return new Message(\"UNKNOWN\", \"NOSECRETS\", null, false);\n        }\n\n        // Its encrypted, verify sig\n        let sig = Crypto.HmacSignature(secrets.HmacKey, env.enc);\n        if (sig.toUpperCase() != env.hmac) {\n            return new Message(\"_\", Events.InvalidHmacSignature, null, false);\n        }\n\n        let decryptedJson = Crypto.AesDecrypt(secrets.EncKey, env.enc);\n\n        try {\n            let decryptedMsg = JSON.parse(decryptedJson);\n\n            let message = new Message(decryptedMsg.message.id, decryptedMsg.message.event, decryptedMsg.message.data, true);\n\n            message.DateTimeStamp = decryptedMsg.message.datetime;\n            message.PosId = decryptedMsg.message.pos_id;\n            message.IncomingHmac = env.hmac; \n            message.DecryptedJson = decryptedJson;\n\n            return message;\n\n        } catch(e) {\n            return new Message(\"UNKNOWN\", \"UNPARSEABLE\", {\"msg\": decryptedJson}, false);\n        }\n    }\n\n    ToJson(stamp) {\n        let now = Date.now();\n        let tzoffset = new Date().getTimezoneOffset() * 60 * 1000;\n        let adjustedTime = new Date(now - tzoffset + stamp.ServerTimeDelta);\n\n        // Format date: \"yyyy-MM-ddTHH:mm:ss.fff\"\n        this.DateTimeStamp = adjustedTime.toISOString().slice(0,-1);\n        this.PosId = stamp.PosId;\n        \n        var envelope = {\n            message: {\n                id: this.Id,\n                event: this.EventName,\n                data: this.Data,\n                datetime: this.DateTimeStamp\n            }\n        };\n\n        if (!this._needsEncryption) {\n            // Unencrypted Messages need PosID inside the message\n            envelope.message.pos_id = this.PosId\n        }\n        this.DecryptedJson = JSON.stringify(envelope);\n\n        if (!this._needsEncryption) {\n            return this.DecryptedJson;\n        }\n\n        let encMsg = Crypto.AesEncrypt(stamp.Secrets.EncKey, this.DecryptedJson);\n        let hmacSig = Crypto.HmacSignature(stamp.Secrets.HmacKey, encMsg);\n        let encrMessageEnvelope = {enc: encMsg, hmac: hmacSig.toUpperCase(), pos_id: stamp.PosId};\n\n        return JSON.stringify(encrMessageEnvelope);\n    }\n}\n","import {SuccessState} from './Messages';\n\n// <summary>\n// Represents the 3 Pairing statuses that the Spi instanxce can be in.\n// </summary>\nexport const SpiStatus = \n{\n    // <summary>\n    // Paired and Connected\n    // </summary>\n    PairedConnected: 'PairedConnected',\n    \n    // <summary>\n    // Paired but trying to establish a connection \n    // </summary>\n    PairedConnecting: 'PairedConnecting',\n    \n    // <summary>\n    // Unpaired\n    // </summary>\n    Unpaired: 'Unpaired'\n};\n\n// <summary>\n// The Spi instance can be in one of these flows at any point in time.\n// </summary>\nexport const SpiFlow = \n{\n    // <summary>\n    // Currently going through the Pairing Process Flow.\n    // Happens during the Unpaired SpiStatus.\n    // </summary>\n    Pairing: 'Pairing',\n    \n    // <summary>\n    // Currently going through the transaction Process Flow.\n    // Cannot happen in the Unpaired SpiStatus.\n    // </summary>\n    Transaction: 'Transaction',\n\n    // <summary>\n    // Not in any of the other states.\n    // </summary>\n    Idle: 'Idle'\n};\n\n// <summary>\n// Represents the Pairing Flow State during the pairing process \n// </summary>\nexport class PairingFlowState\n{\n    constructor(state) {\n        // <summary>\n        // Some text that can be displayed in the Pairing Process Screen\n        // that indicates what the pairing process is up to.\n        // </summary>\n        this.Message = null;\n\n        // <summary>\n        // When true, it means that the EFTPOS is shoing the confirmation code,\n        // and your user needs to press YES or NO on the EFTPOS.\n        // </summary>\n        this.AwaitingCheckFromEftpos = null;\n        \n        // <summary>\n        // When true, you need to display the YES/NO buttons on you pairing screen\n        // for your user to confirm the code.\n        // </summary>\n        this.AwaitingCheckFromPos = null;\n        \n        // <summary>\n        // This is the confirmation code for the pairing process.\n        // </summary>\n        this.ConfirmationCode = null;\n        \n        // <summary>\n        // Indicates whether the Pairing Flow has finished its job.\n        // </summary>\n        this.Finished = null;\n        \n        // <summary>\n        // Indicates whether pairing was successful or not.\n        // </summary>\n        this.Successful = null;\n\n        if(state) {\n            Object.assign(this, state);\n        }\n    }   \n}\n\nexport const TransactionType = \n{\n    Purchase: 'Purchase',\n    Refund: 'Refund',\n    CashoutOnly: 'CashoutOnly',\n    MOTO: 'MOTO',\n    Settle: 'Settle',\n    SettlementEnquiry: 'SettlementEnquiry',\n    GetLastTransaction: 'GetLastTransaction',\n    \n    Preauth: 'Preauth',\n    AccountVerify: 'AccountVerify'\n};\n\n// <summary>\n// Used as a return in the InitiateTx methods to signify whether \n// the transaction was initiated or not, and a reason to go with it.\n// </summary>\nexport class InitiateTxResult\n{\n    constructor(initiated, message)\n    {\n        // <summary>\n        // Whether the tx was initiated.\n        // When true, you can expect updated to your registered callback.\n        // When false, you can retry calling the InitiateX method.\n        // </summary>\n        this.Initiated = initiated;\n\n        // <summary>\n        // Text that gives reason for the Initiated flag, especially in case of false. \n        // </summary>\n        this.Message = message;\n    }\n}\n\n// <summary>\n// Used as a return in calls mid transaction to let you know\n// whether the call was valid or not.\n// These attributes work for COM interop.\n// </summary>\nexport class MidTxResult\n{\n    // <summary>\n    // This default stucture works for COM interop.\n    // </summary>\n    constructor(valid, message)\n    {\n        this.Valid = valid;\n        this.Message = message;\n    }\n}    \n\n// <summary>\n// Represents the State during a TransactionFlow\n// </summary>\nexport class TransactionFlowState\n{\n    constructor(posRefId, type, amountCents, message, msg)\n    {\n        // <summary>\n        //  The id given to this transaction\n        // </summary>\n        this.PosRefId   = posRefId;\n        this.Id         = posRefId; // obsolete, but let's maintain it for now, to mean same as PosRefId.\n\n        // <summary>\n        // Purchase/Refund/Settle/...\n        // </summary>\n        this.Type = type;\n\n        // <summary>\n        // A text message to display on your Transaction Flow Screen\n        // </summary>\n        this.DisplayMessage = msg;\n\n        // <summary>\n        // Amount in cents for this transaction\n        // </summary>\n        this.AmountCents = amountCents;\n\n        // <summary>\n        // Whther the request has been sent to the EFTPOS yet or not.\n        // In the PairedConnecting state, the transaction is initiated\n        // but the request is only sent once the connection is recovered.\n        // </summary>\n        this.RequestSent = false;\n\n        // <summary>\n        // The time when the request was sent to the EFTPOS.\n        // </summary>\n        this.RequestTime = null;\n                \n        // <summary>\n        // The time when we last asked for an update, including the original request at first\n        // </summary>\n        this.LastStateRequestTime = null;\n        \n        // <summary>\n        // Whether we're currently attempting to Cancel the transaction.\n        // </summary>\n        this.AttemptingToCancel = null;\n    \n        // <summary>\n        // When this flag is on, you need to display the dignature accept/decline buttons in your \n        // transaction flow screen.\n        // </summary>\n        this.AwaitingSignatureCheck = false;\n\n        // <summary>\n        // When this flag is on, you need to show your user the phone number to call to get the authorisation code.\n        // Then you need to provide your user means to enter that given code and submit it via SubmitAuthCode().\n        // </summary>\n        this.AwaitingPhoneForAuth = null;\n\n        // <summary>\n        // Whether this transaction flow is over or not.\n        // </summary>\n        this.Finished = false;\n\n        // <summary>\n        // The success state of this transaction. Starts off as Unknown.\n        // When finished, can be Success, Failed OR Unknown.\n        // </summary>\n        this.Success = SuccessState.Unknown;\n\n        // <summary>\n        // The response at the end of the transaction. \n        // Might not be present in all edge cases.\n        // You can then turn this Message into the appropriate structure,\n        // such as PurchaseResponse, RefundResponse, etc\n        // </summary>\n        this.Response = null;\n\n        // <summary>\n        // The message the we received from EFTPOS that told us that signature is required.\n        // </summary>\n        this.SignatureRequiredMessage = null;\n    \n        // <summary>\n        // The message the we received from EFTPOS that told us that Phone For Auth is required.\n        // </summary>\n        this.PhoneForAuthRequiredMessage = null;\n\n        // <summary>\n        // The time when the cancel attempt was made.\n        // </summary>\n        this.CancelAttemptTime = null;\n\n        // <summary>\n        // The request message that we are sending/sent to the server.\n        // </summary>\n        this.Request = message;\n\n        // <summary>\n        // Whether we're currently waiting for a Get Last Transaction Response to get an update. \n        // </summary>\n        this.AwaitingGltResponse = null;\n\n        this.GLTResponsePosRefId = null;\n    }\n\n    Sent(msg)\n    {\n        this.RequestSent = true;\n        this.RequestTime = Date.now();\n        this.LastStateRequestTime = Date.now();\n        this.DisplayMessage = msg;\n    }\n\n    Cancelling(msg)\n    {\n        this.AttemptingToCancel = true;\n        this.CancelAttemptTime = Date.now();\n        this.DisplayMessage = msg;\n    }\n\n    CancelFailed(msg)\n    {\n        this.AttemptingToCancel = false;\n        this.DisplayMessage = msg;\n    }\n\n    CallingGlt()\n    {\n        this.AwaitingGltResponse = true;\n        this.LastStateRequestTime = Date.now();\n    }\n\n    GotGltResponse()\n    {\n        this.AwaitingGltResponse = false;\n    }\n    \n    Failed(response, msg)\n    {\n        this.Success = SuccessState.Failed;\n        this.Finished = true;\n        this.Response = response;\n        this.DisplayMessage = msg;\n    }\n\n    SignatureRequired(spiMessage, msg)\n    {\n        this.SignatureRequiredMessage = spiMessage;\n        this.AwaitingSignatureCheck = true;\n        this.DisplayMessage = msg;\n    }\n\n    SignatureResponded(msg)\n    {\n        this.AwaitingSignatureCheck = false;\n        this.DisplayMessage = msg;\n    }\n    \n    PhoneForAuthRequired(spiMessage, msg)\n    {\n        this.PhoneForAuthRequiredMessage = spiMessage;\n        this.AwaitingPhoneForAuth = true;\n        this.DisplayMessage = msg;\n    }\n    \n    AuthCodeSent(msg)\n    {\n        this.AwaitingPhoneForAuth = false;\n        this.DisplayMessage = msg;\n    }\n\n    Completed(state, response, msg)\n    {\n        this.Success = state;\n        this.Response = response;\n        this.Finished = true;\n        this.AttemptingToCancel = false;\n        this.AwaitingGltResponse = false;\n        this.AwaitingSignatureCheck = false;\n        this.AwaitingPhoneForAuth = false;\n        this.DisplayMessage = msg;\n    }\n\n    UnknownCompleted(msg)\n    {\n        this.Success = SuccessState.Unknown;\n        this.Response = null;\n        this.Finished = true;\n        this.AttemptingToCancel = false;\n        this.AwaitingGltResponse = false;\n        this.AwaitingSignatureCheck = false;\n        this.AwaitingPhoneForAuth = false;\n        this.DisplayMessage = msg;\n    }\n}\n\n// <summary>\n// Used as a return in the SubmitAuthCode method to signify whether Code is valid\n// </summary>\nexport class SubmitAuthCodeResult\n{\n    constructor(validFormat, message)\n    {\n        this.ValidFormat = validFormat;\n\n        // <summary>\n        // Text that gives reason for Invalidity\n        // </summary>\n        this.Message = message;\n    }\n}\n\nexport class SpiConfig\n{\n    constructor() {\n        this.PromptForCustomerCopyOnEftpos  = false;\n        this.SignatureFlowOnEftpos          = false;\n        this.PrintMerchantCopy              = false;\n    }\n\n    addReceiptConfig(messageData)\n    {\n        if (this.PromptForCustomerCopyOnEftpos)\n        {\n            messageData.prompt_for_customer_copy = this.PromptForCustomerCopyOnEftpos;\n        }\n        if (this.SignatureFlowOnEftpos)\n        {\n            messageData.print_for_signature_required_transactions = this.SignatureFlowOnEftpos;\n        }\n        if (this.PrintMerchantCopy)\n        {\n            messageData.print_merchant_copy = this.PrintMerchantCopy;\n        }\n        return messageData;\n    }\n\n    ToString()\n    {\n        return `PromptForCustomerCopyOnEftpos:${this.PromptForCustomerCopyOnEftpos} SignatureFlowOnEftpos:${this.SignatureFlowOnEftpos} PrintMerchantCopy: ${this.PrintMerchantCopy}`;\n    }\n}\n\nexport class TransactionOptions\n{\n    constructor() {\n        this._customerReceiptHeader = null;\n        this._customerReceiptFooter = null;\n        this._merchantReceiptHeader = null;\n        this._merchantReceiptFooter = null;\n    }\n\n    SetCustomerReceiptHeader(customerReceiptHeader)\n    {\n        this._customerReceiptHeader = customerReceiptHeader;\n    }\n\n    SetCustomerReceiptFooter(customerReceiptFooter)\n    {\n        this._customerReceiptFooter = customerReceiptFooter;\n    }\n    SetMerchantReceiptHeader(merchantReceiptHeader)\n    {\n        this._merchantReceiptHeader = merchantReceiptHeader;\n    }\n    SetMerchantReceiptFooter(merchantReceiptFooter)\n    {\n        this._merchantReceiptFooter = merchantReceiptFooter;\n    }\n    AddOptions(messageData)\n    {\n        messageData.customer_receipt_header = this._customerReceiptHeader;\n        messageData.customer_receipt_footer = this._customerReceiptFooter;\n        messageData.merchant_receipt_header = this._merchantReceiptHeader;\n        messageData.merchant_receipt_footer = this._merchantReceiptFooter;\n\n        return messageData;\n    }\n}","let __RequestIdHelperCounter = 1;\n\nexport class RequestIdHelper {\n    static Id(prefix) {\n        return prefix + __RequestIdHelperCounter++;\n    }\n}\n","import {Events, SuccessState, Message} from './Messages';\nimport {RequestIdHelper} from './RequestIdHelper';\nimport {SpiConfig, TransactionOptions} from './SpiModels';\n\nexport class PurchaseRequest {\n    constructor(amountCents, posRefId) {\n        this.PosRefId = posRefId;\n        this.PurchaseAmount = amountCents;\n        this.TipAmount = 0;\n        this.CashoutAmount = 0;\n        this.PromptForCashout = false;\n        this.SurchargeAmount = 0;\n        this.Config = new SpiConfig();\n        this.Options = new TransactionOptions();\n\n        // Library Backwards Compatibility\n        this.Id = posRefId;\n        this.AmountCents = amountCents;\n    }\n\n    AmountSummary()\n    {\n        return `Purchase: ${(this.PurchaseAmount / 100.0).toFixed(2)}; \n            Tip: ${(this.TipAmount / 100.0).toFixed(2)}; \n            Cashout: ${(this.CashoutAmount / 100.0).toFixed(2)};`;\n    }\n\n    ToMessage() {\n        let data = {\n            pos_ref_id: this.PosRefId,\n            purchase_amount: this.PurchaseAmount,\n            tip_amount: this.TipAmount,\n            cash_amount: this.CashoutAmount,\n            prompt_for_cashout: this.PromptForCashout, \n            surcharge_amount: this.SurchargeAmount\n        };\n\n        this.Config.addReceiptConfig(data);\n        this.Options.AddOptions(data);\n        return new Message(RequestIdHelper.Id(\"prchs\"), Events.PurchaseRequest, data, true);\n    }\n}\n\nexport class PurchaseResponse\n{\n    constructor(m)\n    {\n        this._m = m;\n        this.RequestId = m.Id;\n        this.PosRefId = m.Data.pos_ref_id;\n        this.SchemeName = m.Data.scheme_name;\n        this.SchemeAppName = m.Data.scheme_name;\n        this.Success = m.GetSuccessState() == SuccessState.Success;\n    }\n\n    GetRRN()\n    {\n        return this._m.Data.rrn;\n    }\n\n    GetPurchaseAmount()\n    {\n        return this._m.Data.purchase_amount;\n    }\n\n    GetTipAmount()\n    {\n        return this._m.Data.tip_amount;\n    }\n\n    GetSurchargeAmount()\n    {\n        return this._m.Data.surcharge_amount;\n    }\n\n    GetCashoutAmount()\n    {\n        return this._m.Data.cash_amount;\n    }\n\n    GetBankNonCashAmount()\n    {\n        return this._m.Data.bank_noncash_amount;\n    }\n\n    GetBankCashAmount()\n    {\n        return this._m.Data.bank_cash_amount;\n    }\n\n    GetCustomerReceipt()\n    {\n        return this._m.Data.customer_receipt || \"\";\n    }\n\n    GetMerchantReceipt()\n    {\n        return this._m.Data.merchant_receipt || \"\";\n    }\n\n    GetResponseText()\n    {\n        return this._m.Data.host_response_text || \"\";\n    }\n\n    GetResponseCode()\n    {\n        return this._m.Data.host_response_code;\n    }\n    \n    GetTerminalReferenceId()\n    {\n        return this._m.Data.terminal_ref_id;\n    }\n\n    GetCardEntry()\n    {\n        return this._m.Data.card_entry;\n    }\n    \n    GetAccountType()\n    {\n        return this._m.Data.account_type;\n    }\n\n    GetAuthCode()\n    {\n        return this._m.Data.auth_code;\n    }\n\n    GetBankDate()\n    {\n        return this._m.Data.bank_date;\n    }\n\n    GetBankTime()\n    {\n        return this._m.Data.bank_time;\n    }\n    \n    GetMaskedPan()\n    {\n        return this._m.Data.masked_pan;\n    }\n    \n    GetTerminalId()\n    {\n        return this._m.Data.terminal_id;\n    }\n\n    WasMerchantReceiptPrinted()\n    {\n        return this._m.Data.merchant_receipt_printed;\n    }\n\n    WasCustomerReceiptPrinted()\n    {\n        return this._m.Data.customer_receipt_printed;\n    }\n    \n    GetSettlementDate()\n    {\n        //\"bank_settlement_date\":\"20042018\"\n        var dateStr = this._m.Data.bank_settlement_date;\n        if (!dateStr) return null;\n        return Message.ParseBankDate(dateStr);\n    }\n\n    GetResponseValue(attribute)\n    {\n        return this._m.Data[attribute];\n    }\n\n    ToPaymentSummary()\n    {\n        return {\n            account_type: this.GetAccountType(),\n            auth_code: this.GetAuthCode(),\n            bank_date: this.GetBankDate(),\n            bank_time: this.GetBankTime(),\n            host_response_code: this.GetResponseCode(),\n            host_response_text: this.GetResponseText(),\n            masked_pan: this.GetMaskedPan(),\n            purchase_amount: this.GetPurchaseAmount(),\n            rrn: this.GetRRN(),\n            scheme_name: this.SchemeName,\n            terminal_id: this.GetTerminalId(),\n            terminal_ref_id: this.GetTerminalReferenceId(),\n            tip_amount: this.GetTipAmount(),\n            surcharge_amount: this.GetSurchargeAmount()\n        };\n    }\n}\n\nexport class CancelTransactionRequest\n{\n    \n    ToMessage()\n    {\n        return new Message(RequestIdHelper.Id(\"ctx\"), Events.CancelTransactionRequest, null, true);\n    }\n}\n\nexport class CancelTransactionResponse\n{\n    constructor(m)\n    {\n        this._m = m;\n        this.PosRefId = this._m.Data.pos_ref_id;\n        this.Success = this._m.GetSuccessState() == SuccessState.Success;\n    }\n\n    GetErrorReason()\n    {\n        return this._m.Data.error_reason;\n    }\n\n    GetErrorDetail()\n    {\n        return this._m.Data.error_detail;\n    }\n\n    GetResponseValueWithAttribute(attribute)\n    {\n        return this._m.Data[attribute];\n    }\n}\n\nexport class GetLastTransactionRequest\n{\n    ToMessage()\n    {\n        return new Message(RequestIdHelper.Id(\"glt\"), Events.GetLastTransactionRequest, null, true);\n    }\n}\n\nexport class GetLastTransactionResponse\n{\n    constructor(m)\n    {\n        this._m = m;\n    }\n\n    WasRetrievedSuccessfully()\n    {\n        // We can't rely on checking \"success\" flag or \"error\" fields here,\n        // as retrieval may be successful, but the retrieved transaction was a fail.\n        // So we check if we got back an ResponseCode.\n        // (as opposed to say an operation_in_progress_error)\n        return !!this.GetResponseCode();\n    }\n\n    WasTimeOutOfSyncError()\n    {\n        return this._m.GetError().startsWith(\"TIME_OUT_OF_SYNC\");\n    }\n\n    WasOperationInProgressError()\n    {\n        return this._m.GetError().startsWith(\"OPERATION_IN_PROGRESS\");\n    }\n\n    IsWaitingForSignatureResponse()\n    {\n        return this._m.GetError().startsWith(\"OPERATION_IN_PROGRESS_AWAITING_SIGNATURE\");\n    }\n\n    IsWaitingForAuthCode()\n    {\n        return this._m.GetError().startsWith(\"OPERATION_IN_PROGRESS_AWAITING_PHONE_AUTH_CODE\");\n    }\n    \n    IsStillInProgress(posRefId)\n    {\n        return this.WasOperationInProgressError() && this.GetPosRefId() == posRefId;\n    }\n\n    GetSuccessState()\n    {\n        return this._m.GetSuccessState();\n    }\n\n    WasSuccessfulTx()\n    {\n        return this._m.GetSuccessState() == SuccessState.Success;\n    }\n\n    GetTxType()\n    {\n        return this._m.Data.transaction_type;\n    }\n\n    GetPosRefId()\n    {\n        return this._m.Data.pos_ref_id;\n    }\n\n    GetSchemeApp()\n    {\n        return this._m.Data.scheme_name;\n    }\n\n    GetSchemeName()\n    {\n        return this._m.Data.scheme_name;\n    }\n\n    GetAmount()\n    {\n        return this._m.Data.amount_purchase;\n    }\n\n    GetTransactionAmount()\n    {\n        return this._m.Data.amount_transaction_type;\n    }\n\n    GetBankDateTimeString()\n    {\n        var ds = this._m.Data.bank_date + this._m.Data.bank_time;\n        return ds;\n    }\n\n    GetRRN()\n    {\n        return this._m.Data.rrn;\n    }\n    \n    GetResponseText()\n    {\n        return this._m.Data.host_response_text | \"\";\n    }\n\n    GetResponseCode()\n    {\n        return this._m.Data.host_response_code;\n    }\n\n    // <summary>\n    // There is a bug, VSV-920, whereby the customer_receipt is missing from a glt response.\n    // The current recommendation is to use the merchant receipt in place of it if required.\n    // This method modifies the underlying incoming message data by copying\n    // the merchant receipt into the customer receipt only if there \n    // is a merchant_receipt and there is not a customer_receipt.   \n    // </summary>\n    CopyMerchantReceiptToCustomerReceipt()\n    {\n        var cr = this._m.Data.customer_receipt;\n        var mr = this._m.Data.merchant_receipt;\n        if (mr != \"\" && !(cr))\n        {\n            this._m.Data.customer_receipt = mr;\n        }\n    }\n}\n\nexport class RefundRequest\n{\n    constructor(amountCents, posRefId)\n    {\n        this.AmountCents = amountCents;\n        this.Id = RequestIdHelper.Id(\"refund\");\n        this.PosRefId = posRefId;\n        this.Config = new SpiConfig();\n        this.Options = new TransactionOptions();\n    }\n    \n    ToMessage()\n    {\n        let data = {refund_amount: this.AmountCents, pos_ref_id: this.PosRefId};\n        this.Config.addReceiptConfig(data);\n        this.Options.AddOptions(data);\n        return new Message(RequestIdHelper.Id(\"refund\"), Events.RefundRequest, data, true);\n    }\n}\n\nexport class RefundResponse\n{\n    constructor(m)\n    {\n        this._m = m;\n        this.RequestId = m.Id;\n        this.PosRefId = m.Data.pos_ref_id;\n        this.SchemeName = m.Data.scheme_name;\n        this.SchemeAppName = m.Data.scheme_name;\n        this.Success = m.GetSuccessState() == SuccessState.Success;\n    }\n\n    GetRefundAmount()\n    {\n        return this._m.Data.refund_amount;\n    }\n\n    GetRRN()\n    {\n        return this._m.Data.rrn;\n    }\n\n    GetCustomerReceipt()\n    {\n        return this._m.Data.customer_receipt || \"\";\n    }\n\n    GetMerchantReceipt()\n    {\n        return this._m.Data.merchant_receipt;\n    }\n    \n    GetResponseText()\n    {\n        return this._m.Data.host_response_text || \"\";\n    }\n\n    GetResponseCode()\n    {\n        return this._m.Data.host_response_code || \"\";\n    }\n\n\n    GetTerminalReferenceId()\n    {\n        return this._m.Data.terminal_ref_id || \"\";\n    }\n    GetCardEntry()\n    {\n        return this._m.Data.card_entry || \"\";\n    }\n    GetAccountType()\n    {\n        return this._m.Data.account_type || \"\";\n    }\n    GetAuthCode()\n    {\n        return this._m.Data.auth_code || \"\";\n    }\n    GetBankDate()\n    {\n        return this._m.Data.bank_date || \"\";\n    }\n    GetBankTime()\n    {\n        return this._m.Data.bank_time || \"\";\n    }\n    GetMaskedPan()\n    {\n        return this._m.Data.masked_pan || \"\";\n    }\n    GetTerminalId()\n    {\n        return this._m.Data.terminal_id || \"\";\n    }\n    WasMerchantReceiptPrinted()\n    {\n        return this._m.Data.merchant_receipt_printed;\n    }\n    WasCustomerReceiptPrinted()\n    {\n        return this._m.Data.customer_receipt_printed;\n    }\n    GetSettlementDate()\n    {\n        //\"bank_settlement_date\":\"20042018\"\n        var dateStr = this._m.Data.bank_settlement_date;\n        if (!dateStr) return null;\n        return Message.ParseBankDate(dateStr);\n    }\n\n    GetResponseValue(attribute)\n    {\n        return this._m.Data[attribute];\n    }\n}\n\nexport class SignatureRequired\n{\n    constructor(m)\n    {\n        this.RequestId = m.Id;\n        this.PosRefId = m.Data.pos_ref_id;\n        this._receiptToSign = m.Data.merchant_receipt;\n    }\n    \n    SignatureRequired(posRefId, requestId, receiptToSign)\n    {\n        this.RequestId = requestId;\n        this.PosRefId = posRefId;\n        this._receiptToSign = receiptToSign;\n    }\n\n    GetMerchantReceipt()\n    {\n        return this._receiptToSign;\n    }\n}\n\nexport class SignatureDecline\n{\n    constructor(posRefId)\n    {\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            pos_ref_id: this.PosRefId\n        };\n        return new Message(RequestIdHelper.Id(\"sigdec\"), Events.SignatureDeclined, data, true);\n    }\n}\n\nexport class SignatureAccept\n{\n    constructor(posRefId)\n    {\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            pos_ref_id: this.PosRefId\n        };\n        return new Message(RequestIdHelper.Id(\"sigacc\"), Events.SignatureAccepted, data, true);\n    }\n}\n\nexport class MotoPurchaseRequest\n{\n    constructor(amountCents, posRefId, surchargeAmount)\n    {\n        this.PosRefId = posRefId;\n        this.PurchaseAmount = amountCents;\n        this.SurchargeAmount = surchargeAmount;\n        this.Config = new SpiConfig();\n        this.Options = new TransactionOptions();\n    }\n\n    ToMessage()\n    {\n        var data = {\n            pos_ref_id: this.PosRefId,\n            purchase_amount: this.PurchaseAmount,\n            surcharge_amount: this.SurchargeAmount\n        };\n        this.Config.addReceiptConfig(data);\n        this.Options.AddOptions(data);\n        return new Message(RequestIdHelper.Id(\"moto\"), Events.MotoPurchaseRequest, data, true);\n    }\n}\n\nexport class MotoPurchaseResponse\n{\n    constructor(m)\n    {\n        this.PurchaseResponse = new PurchaseResponse(m);\n        this.PosRefId = PurchaseResponse.PosRefId;\n    }\n}\n\nexport class PhoneForAuthRequired\n{\n    constructor(...args)\n    {\n        if(args.length === 4) {\n            this.PosRefId = args[0];\n            this.RequestId = args[1];\n            this._phoneNumber = args[2];\n            this._merchantId = args[3];\n        } else if(args.length === 1) {\n            this.RequestId = args[0].Id;\n            this.PosRefId = args[0].Data.pos_ref_id;\n            this._phoneNumber = args[0].Data.auth_centre_phone_number;\n            this._merchantId = args[0].Data.merchant_id;\n        } else {\n            throw new Error('Invalid call sig for Phone auth required class');\n        }\n    }\n    \n    GetPhoneNumber()\n    {\n        return this._phoneNumber;\n    }\n    \n    GetMerchantId()\n    {\n        return this._merchantId;\n    }\n}\n\nexport class AuthCodeAdvice\n{\n    constructor(posRefId, authCode)\n    {\n        this.PosRefId = posRefId;\n        this.AuthCode = authCode;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            pos_ref_id: this.PosRefId,\n            auth_code: this.AuthCode\n        };\n        return new Message(RequestIdHelper.Id(\"authad\"), Events.AuthCodeAdvice, data, true);\n    }\n}","import {Events, Message} from './Messages';\nimport {PurchaseResponse} from './Purchase';\n\n// <summary>\n// This class represents the BillDetails that the POS will be asked for throughout a PayAtTable flow.\n// </summary>\nexport class BillStatusResponse\n{\n    constructor() {\n        // <summary>\n        // Set this Error accordingly if you are not able to return the BillDetails that were asked from you.\n        // </summary>\n        this.Result = null;\n        \n        // <summary>\n        // This is a unique identifier that you assign to each bill.\n        // It migt be for example, the timestamp of when the cover was opened.\n        // </summary>\n        this.BillId = null;\n        \n        // <summary>\n        // This is the table id that this bill was for.\n        // The waiter will enter it on the Eftpos at the start of the PayAtTable flow and the Eftpos will \n        // retrieve the bill using the table id. \n        // </summary>\n        this.TableId = null;\n        \n        // <summary>\n        // The Total Amount on this bill, in cents.\n        // </summary>\n        this.TotalAmount = 0;\n        \n        // <summary>\n        // The currently outsanding amount on this bill, in cents.\n        // </summary>\n        this.OutstandingAmount = 0;\n\n        // <summary>\n        // Your POS is required to persist some state on behalf of the Eftpos so the Eftpos can recover state.\n        // It is just a piece of string that you save against your billId.\n        // WHenever you're asked for BillDetails, make sure you return this piece of data if you have it.\n        // </summary>\n        this.BillData = \"\";\n    }\n\n    getBillPaymentHistory()\n    {\n        if (!this.BillData)\n        {\n            return [];\n        }\n        \n        let billPaymentHistory = [];\n        let savedBillData = JSON.parse(this.BillData);\n\n        return savedBillData.map((bill) => {\n            return new PaymentHistoryEntry(bill.payment_type, bill.payment_summary);\n        });\n    }\n\n    static ToBillData(ph)\n    {\n        if (ph.length < 1)\n        {\n            return \"\";\n        }\n\n        return JSON.stringify(ph);\n    }\n    \n    ToMessage(messageId)\n    {\n        var data = {\n            \"success\": this.Result==BillRetrievalResult.SUCCESS\n        };\n        \n        if (this.BillId) data.bill_id = this.BillId;\n        if (this.TableId) data.table_id = this.TableId;\n\n        if (this.Result == BillRetrievalResult.SUCCESS)\n        {\n            data.bill_total_amount = this.TotalAmount;\n            data.bill_outstanding_amount = this.OutstandingAmount;\n            data.bill_payment_history = this.getBillPaymentHistory();\n        }\n        else\n        {\n            data.error_reason = this.Result.toString();\n            data.error_detail = this.Result.toString();\n        }\n\n        return new Message(messageId, Events.PayAtTableBillDetails, data, true);\n    }\n}\n\nexport const BillRetrievalResult = \n{\n    SUCCESS: 'SUCCESS',\n    INVALID_TABLE_ID: 'INVALID_TABLE_ID',\n    INVALID_BILL_ID: 'INVALID_BILL_ID',\n    INVALID_OPERATOR_ID: 'INVALID_OPERATOR_ID'\n};\n\nexport const PaymentType = \n{\n    CARD: 'CARD',\n    CASH: 'CASH' \n};\n\nexport class BillPayment\n{\n    constructor(m)\n    {\n        this._incomingAdvice = m;\n        this.BillId = this._incomingAdvice.Data[\"bill_id\"];\n        this.TableId = this._incomingAdvice.Data[\"table_id\"];\n        this.OperatorId = this._incomingAdvice.Data[\"operator_id\"];\n        \n        var pt = this._incomingAdvice.Data[\"payment_type\"];\n        this.PaymentType = pt;\n        \n        // this is when we ply the sub object \"payment_details\" into a purchase response for convenience.\n        var purchaseMsg = new Message(m.Id, \"payment_details\", m.Data[\"payment_details\"], false);\n        this.PurchaseResponse = new PurchaseResponse(purchaseMsg);\n\n        this.PurchaseAmount = this.PurchaseResponse.GetPurchaseAmount();\n        this.TipAmount = this.PurchaseResponse.GetTipAmount();\n    }\n}\n\nexport class PaymentHistoryEntry\n{\n    constructor(paymentType, paymentSummary)\n    {\n        this.PaymentType = paymentType;\n        this.PaymentSummary = paymentSummary;\n    }\n\n    toJSON() {\n        return {\n            payment_type: this.PaymentType,\n            payment_summary: this.PaymentSummary\n        };\n    }\n    \n    GetTerminalRefId()\n    {\n        return this.PaymentSummary[\"terminal_ref_id\"];\n    }\n}\n\nexport class PayAtTableConfig\n{\n    constructor() {\n        this.PayAtTabledEnabled = false;\n        this.OperatorIdEnabled = false;\n        this.SplitByAmountEnabled = false;\n        this.EqualSplitEnabled = false;\n    \n        this.TippingEnabled = false;\n    \n        this.SummaryReportEnabled = false;\n    \n        this.LabelPayButton = '';\n        this.LabelOperatorId = '';\n        this.LabelTableId = '';\n    \n        // \n        // <summary>\n        // Fill in with operator ids that the eftpos terminal will validate against. \n        // Leave Empty to allow any operator_id through. \n        // </summary>\n       this.AllowedOperatorIds = [];\n    }\n\n    ToMessage(messageId)\n    {\n        var data = {\n            \"pay_at_table_enabled\": this.PayAtTabledEnabled,\n            \"operator_id_enabled\": this.OperatorIdEnabled,\n            \"split_by_amount_enabled\": this.SplitByAmountEnabled,\n            \"equal_split_enabled\": this.EqualSplitEnabled,\n            \"tipping_enabled\": this.TippingEnabled,\n            \"summary_report_enabled\": this.SummaryReportEnabled,\n            \"pay_button_label\": this.LabelPayButton,\n            \"operator_id_label\": this.LabelOperatorId,\n            \"table_id_label\": this.LabelTableId,\n            \"operator_id_list\": this.AllowedOperatorIds\n        };\n\n        return new Message(messageId, Events.PayAtTableSetTableConfig, data, true);\n    }\n    \n    static FeatureDisableMessage(messageId) {\n        var data = {\n            \"pay_at_table_enabled\": false\n        };\n        return new Message(messageId, Events.PayAtTableSetTableConfig, data, true);\n    }\n}\n\n    ","import {RequestIdHelper} from './RequestIdHelper';\nimport {BillPayment, PayAtTableConfig, PaymentHistoryEntry, BillRetrievalResult, BillStatusResponse} from './PayAtTable';\n\nexport class SpiPayAtTable\n{  \n    constructor(spi)\n    {\n        this._spi = spi;\n        this._log = console;\n\n        this.Config = Object.assign(new PayAtTableConfig(), {\n            PayAtTabledEnabled: true,\n            OperatorIdEnabled: true,\n            AllowedOperatorIds: [],\n            EqualSplitEnabled: true,\n            SplitByAmountEnabled: true,\n            SummaryReportEnabled: true,\n            TippingEnabled: true,\n            LabelOperatorId: \"Operator ID\",\n            LabelPayButton: \"Pay at Table\",\n            LabelTableId: \"Table Number\"\n        });\n    }\n\n    // <summary>\n    // This delegate will be called when the Eftpos needs to know the current state of a bill for a table. \n    // <para />\n    // Parameters:<para />\n    // billId - The unique identifier of the bill. If empty, it means that the PayAtTable flow on the Eftpos is just starting, and the lookup is by tableId.<para />\n    // tableId - The identifier of the table that the bill is for. <para />\n    // operatorId - The id of the operator entered on the eftpos. <para />\n    // <para />\n    // Return:<para />\n    // You need to return the current state of the bill.\n    // </summary>\n    GetBillStatus(billId, tableId, operatorId) {\n        throw new Exception('Method not implemented. Please overwrite this method in your POS');\n    }\n\n    // Abstract method, must implement in POS system\n    BillPaymentReceived(billPayment, updatedBillData) {\n        throw new Exception('Method not implemented. Please overwrite this method in your POS');\n    }\n\n    PushPayAtTableConfig()\n    {\n        this._spi._send(this.Config.ToMessage(RequestIdHelper.Id(\"patconf\")));\n    } \n    \n    _handleGetBillDetailsRequest(m)\n    {\n        var operatorId = m.Data[\"operator_id\"];\n        var tableId = m.Data[\"table_id\"];\n\n        // Ask POS for Bill Details for this tableId, inluding encoded PaymentData\n        var billStatus = this.GetBillStatus(null, tableId, operatorId);\n        billStatus.TableId = tableId;\n        if (billStatus.TotalAmount <= 0)\n        {\n            this._log.info(\"Table has 0 total amount. not sending it to eftpos.\");\n            billStatus.Result = BillRetrievalResult.INVALID_TABLE_ID;\n        }\n        \n        this._spi._send(billStatus.ToMessage(m.Id));\n    }\n\n    _handleBillPaymentAdvice(m)\n    {\n        var billPayment = new BillPayment(m);\n        \n        // Ask POS for Bill Details, inluding encoded PaymentData\n        var existingBillStatus = this.GetBillStatus(billPayment.BillId, billPayment.TableId, billPayment.OperatorId);\n        if (existingBillStatus.Result != BillRetrievalResult.SUCCESS)\n        {\n            this._log.warn(\"Could not retrieve Bill Status for Payment Advice. Sending Error to Eftpos.\");\n            this._spi._send(existingBillStatus.ToMessage(m.Id));\n        }\n                    \n        var existingPaymentHistory = existingBillStatus.getBillPaymentHistory();\n   \n        var foundExistingEntry = existingPaymentHistory.find(phe => phe.GetTerminalRefId() == billPayment.PurchaseResponse.GetTerminalReferenceId());\n        if (foundExistingEntry)\n        {\n            // We have already processed this payment.\n            // perhaps Eftpos did get our acknowledgement.\n            // Let's update Eftpos.\n            this._log.warn(\"Had already received this bill_paymemnt advice from eftpos. Ignoring.\");\n            this._spi._send(existingBillStatus.ToMessage(m.Id));\n            return;\n        }\n\n        // Let's add the new entry to the history\n        var updatedHistoryEntries = existingPaymentHistory;\n        updatedHistoryEntries.push(\n            new PaymentHistoryEntry(billPayment.PaymentType.toLowerCase(), billPayment.PurchaseResponse.ToPaymentSummary())\n        );\n        \n        var updatedBillData = BillStatusResponse.ToBillData(updatedHistoryEntries);\n\n        // Advise POS of new payment against this bill, and the updated BillData to Save.\n        var updatedBillStatus = this.BillPaymentReceived(billPayment, updatedBillData);\n\n        // Just in case client forgot to set these:\n        updatedBillStatus.BillId = billPayment.BillId;\n        updatedBillStatus.TableId = billPayment.TableId;\n\n        if (updatedBillStatus.Result != BillRetrievalResult.SUCCESS)\n        {\n            this._log.warn(\"POS Errored when being Advised of Payment. Letting EFTPOS know, and sending existing bill data.\");\n            updatedBillStatus.BillData = existingBillStatus.BillData;\n        }\n        else\n        {\n            updatedBillStatus.BillData = updatedBillData;\n        }\n    \n        this._spi._send(updatedBillStatus.ToMessage(m.Id));\n    }\n    \n    _handleGetTableConfig(m)\n    {\n        this._spi._send(this.Config.ToMessage(m.Id));\n    }\n}\n","import {RequestIdHelper} from './RequestIdHelper';\nimport {Message} from './Messages';\nimport {PurchaseResponse} from './Purchase';\n\nexport const PreauthEvents = \n{\n    AccountVerifyRequest: \"account_verify\",\n    AccountVerifyResponse: \"account_verify_response\",\n    \n    PreauthOpenRequest : \"preauth\",\n    PreauthOpenResponse : \"preauth_response\",\n\n    PreauthTopupRequest: \"preauth_topup\",\n    PreauthTopupResponse: \"preauth_topup_response\",\n\n    PreauthExtendRequest: \"preauth_extend\",\n    PreauthExtendResponse: \"preauth_extend_response\",\n\n    PreauthPartialCancellationRequest : \"preauth_partial_cancellation\",\n    PreauthPartialCancellationResponse : \"preauth_partial_cancellation_response\",\n    \n    PreauthCancellationRequest : \"preauth_cancellation\",\n    PreauthCancellationResponse : \"preauth_cancellation_response\",\n\n    PreauthCompleteRequest : \"completion\",\n    PreauthCompleteResponse : \"completion_response\"\n};\n\nexport class AccountVerifyRequest\n{\n    constructor(posRefId)\n    {\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId\n        };\n\n        return new Message(RequestIdHelper.Id(\"prav\"), PreauthEvents.AccountVerifyRequest, data, true);\n    }\n}\n\nexport class AccountVerifyResponse\n{\n    constructor(m)\n    {\n        this.Details = new PurchaseResponse(m);\n        this.PosRefId = this.Details.PosRefId;\n        this._m = m;\n    }\n}\n\nexport class PreauthOpenRequest\n{\n    constructor(amountCents, posRefId)\n    {\n        this.PosRefId = posRefId;\n        this.PreauthAmount = amountCents;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_amount\": this.PreauthAmount\n        };\n\n        return new Message(RequestIdHelper.Id(\"prac\"), PreauthEvents.PreauthOpenRequest, data, true);\n    }\n}\n\nexport class PreauthTopupRequest\n{\n    constructor(preauthId, topupAmountCents, posRefId)\n    {\n        this.PreauthId = preauthId;\n        this.TopupAmount = topupAmountCents;\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_id\": this.PreauthId,\n            \"topup_amount\": this.TopupAmount\n        };\n\n        return new Message(RequestIdHelper.Id(\"prtu\"), PreauthEvents.PreauthTopupRequest, data, true);\n    }\n}\n\nexport class PreauthPartialCancellationRequest\n{\n    constructor(preauthId, partialCancellationAmountCents, posRefId)\n    {\n        this.PreauthId = preauthId;\n        this.PartialCancellationAmount = partialCancellationAmountCents;\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_id\": this.PreauthId,\n            \"preauth_cancel_amount\": this.PartialCancellationAmount\n        };\n\n        return new Message(RequestIdHelper.Id(\"prpc\"), PreauthEvents.PreauthPartialCancellationRequest, data, true);\n    }\n}\n\nexport class PreauthExtendRequest\n{\n    constructor(preauthId, posRefId)\n    {\n        this.PreauthId = preauthId;\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_id\": this.PreauthId\n        };\n\n        return new Message(RequestIdHelper.Id(\"prext\"), PreauthEvents.PreauthExtendRequest, data, true);\n    }\n}\n\nexport class PreauthCancelRequest\n{\n    constructor(preauthId, posRefId)\n    {\n        this.PreauthId = preauthId;\n        this.PosRefId = posRefId;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_id\": this.PreauthId\n        };\n\n        return new Message(RequestIdHelper.Id(\"prac\"), PreauthEvents.PreauthCancellationRequest, data, true);\n    }\n}\n\nexport class PreauthCompletionRequest\n{\n    constructor(preauthId, completionAmountCents, posRefId, surchargeAmount)\n    {\n        this.PreauthId = preauthId;\n        this.CompletionAmount = completionAmountCents;\n        this.PosRefId = posRefId;\n        this.SurchargeAmount = surchargeAmount;\n    }\n\n    ToMessage()\n    {\n        var data = {\n            \"pos_ref_id\": this.PosRefId,\n            \"preauth_id\": this.PreauthId,\n            \"completion_amount\": this.CompletionAmount,\n            \"surcharge_amount\": this.SurchargeAmount\n        };\n\n        return new Message(RequestIdHelper.Id(\"prac\"), PreauthEvents.PreauthCompleteRequest, data, true);\n    }\n}\n\nexport class PreauthResponse\n{\n    constructor(m)\n    {\n        this.PreauthId = m.Data[\"preauth_id\"];\n        this.Details = new PurchaseResponse(m);\n        this.PosRefId = this.Details.PosRefId;\n        this._m = m;\n    }\n\n    GetBalanceAmount()\n    {\n        var txType = this._m.Data[\"transaction_type\"];\n        switch (txType)\n        {\n            case \"PRE-AUTH\":\n                return this._m.Data[\"preauth_amount\"];\n            case \"TOPUP\":\n                return this._m.Data[\"balance_amount\"];\n            case \"CANCEL\": // PARTIAL CANCELLATION\n                return this._m.Data[\"balance_amount\"];\n            case \"PRE-AUTH EXT\":\n                return this._m.Data[\"balance_amount\"];\n            case \"PCOMP\":\n                return 0; // Balance is 0 after completion\n            case \"PRE-AUTH CANCEL\":\n                return 0; // Balance is 0 after cancellation\n            default:\n                return 0;\n        }\n    }\n\n    GetPreviousBalanceAmount()\n    {\n        var txType = this._m.Data[\"transaction_type\"];\n        switch (txType)\n        {   \n            case \"PRE-AUTH\":\n                return 0;\n            case \"TOPUP\":\n                return this._m.Data[\"existing_preauth_amount\"];\n            case \"CANCEL\": // PARTIAL CANCELLATION\n                return this._m.Data[\"existing_preauth_amount\"];\n            case \"PRE-AUTH EXT\":\n                return this._m.Data[\"existing_preauth_amount\"];\n            case \"PCOMP\":\n                // THIS IS TECHNICALLY NOT CORRECT WHEN COMPLETION HAPPENS FOR A PARTIAL AMOUNT.\n                // BUT UNFORTUNATELY, THIS RESPONSE DOES NOT CONTAIN \"existing_preauth_amount\".\n                // SO \"completion_amount\" IS THE CLOSEST WE HAVE.\n                return this._m.Data[\"completion_amount\"];\n            case \"PRE-AUTH CANCEL\":\n                return this._m.Data[\"preauth_amount\"];\n            default:\n                return 0;\n        }\n    }\n    \n    GetCompletionAmount()\n    {\n        var txType = this._m.Data[\"transaction_type\"];\n        switch (txType)\n        {   \n            case \"PCOMP\":\n                return this._m.Data[\"completion_amount\"];\n            default:\n                return 0;\n        }\n\n    }\n\n    GetSurchargeAmount()\n    {\n        var txType = this._m.Data[\"transaction_type\"];\n        switch (txType)\n        {\n            case \"PCOMP\":\n                return this._m.Data[\"surcharge_amount\"];\n            default:\n                return 0;\n        }\n    }\n}","import {\n    PreauthEvents,\n    AccountVerifyRequest, \n    PreauthOpenRequest, \n    PreauthTopupRequest, \n    PreauthPartialCancellationRequest, \n    PreauthExtendRequest,\n    PreauthCompletionRequest,\n    PreauthCancelRequest} from './Preauth';\n\nimport {TransactionFlowState, TransactionType, InitiateTxResult} from './SpiModels';\n\nexport class SpiPreauth\n{\n    constructor(spi)\n    {\n        this._spi = spi;\n        this._log = console;\n    }\n\n    InitiateAccountVerifyTx(posRefId)\n    {\n        var verifyMsg = new AccountVerifyRequest(posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.AccountVerify, 0, verifyMsg,\n            \"Waiting for EFTPOS connection to make account verify request\");\n        var sentMsg = \"Asked EFTPOS to verify account\";\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n    \n    InitiateOpenTx(posRefId, amountCents)\n    {\n        var msg = new PreauthOpenRequest(amountCents, posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, amountCents, msg,\n            `Waiting for EFTPOS connection to make preauth request for ${(amountCents / 100.0).toFixed(2)}`);\n        var sentMsg = `Asked EFTPOS to create preauth for ${(amountCents / 100.0).toFixed(2)}`;\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    InitiateTopupTx(posRefId, preauthId, amountCents)\n    {\n        var msg = new PreauthTopupRequest(preauthId, amountCents, posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, amountCents, msg,\n            `Waiting for EFTPOS connection to make preauth topup request for ${(amountCents / 100.0).toFixed(2)}`);\n        var sentMsg = `Asked EFTPOS to make preauth topup for ${(amountCents / 100.0).toFixed(2)}`;\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    InitiatePartialCancellationTx(posRefId, preauthId, amountCents)\n    {\n        var msg = new PreauthPartialCancellationRequest(preauthId, amountCents, posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, amountCents, msg,\n            `Waiting for EFTPOS connection to make preauth partial cancellation request for ${(amountCents / 100.0).toFixed(2)}`);\n        var sentMsg = `Asked EFTPOS to make preauth partial cancellation for ${(amountCents / 100.0).toFixed(2)}`;\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    InitiateExtendTx(posRefId, preauthId)\n    {\n        var msg = new PreauthExtendRequest(preauthId, posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, 0, msg,\n            \"Waiting for EFTPOS connection to make preauth Extend request\");\n        var sentMsg = \"Asked EFTPOS to make preauth Extend request\";\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    InitiateCompletionTx(posRefId, preauthId, amountCents, surchargeAmount)\n    {\n        var msg = new PreauthCompletionRequest(preauthId, amountCents, posRefId, surchargeAmount).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, amountCents, msg,\n            `Waiting for EFTPOS connection to make preauth completion request for ${(amountCents / 100.0).toFixed(2)}`);\n        var sentMsg = `Asked EFTPOS to make preauth completion for ${(amountCents / 100.0).toFixed(2)}`;\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    InitiateCancelTx(posRefId, preauthId)\n    {\n        var msg = new PreauthCancelRequest(preauthId, posRefId).ToMessage();\n        var tfs = new TransactionFlowState(\n            posRefId, TransactionType.Preauth, 0, msg,\n            \"Waiting for EFTPOS connection to make preauth cancellation request\");\n        var sentMsg = \"Asked EFTPOS to make preauth cancellation request\";\n        return this._initiatePreauthTx(tfs, sentMsg);\n    }\n\n    _initiatePreauthTx(tfs, sentMsg)\n    {\n        if (this._spi.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n\n        if (this._spi.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n\n        this._spi.CurrentFlow = SpiFlow.Transaction;\n        this._spi.CurrentTxFlowState = tfs;\n        if (this._spi._send(tfs.Request))\n        {\n            this._spi.CurrentTxFlowState.Sent(sentMsg);\n        }\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this._spi.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Preauth Initiated\");\n    }\n\n    _handlePreauthMessage(m)\n    {\n        switch (m.EventName)\n        {\n            case PreauthEvents.AccountVerifyResponse:\n                this._handleAccountVerifyResponse(m);\n                break;\n            case PreauthEvents.PreauthOpenResponse:\n            case PreauthEvents.PreauthTopupResponse:\n            case PreauthEvents.PreauthPartialCancellationResponse:\n            case PreauthEvents.PreauthExtendResponse:\n            case PreauthEvents.PreauthCompleteResponse:\n            case PreauthEvents.PreauthCancellationResponse:\n                this._handlePreauthResponse(m);\n                break;\n            default:\n                this._log.info(`I don't Understand Preauth Event: ${m.EventName}, ${m.Data}. Perhaps I have not implemented it yet.`);\n                break;\n        }\n    }\n\n    _handleAccountVerifyResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        var currentTxFlowState = this._spi.CurrentTxFlowState;\n        if (this._spi.CurrentFlow != SpiFlow.Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId)\n        {\n            this._log.info(`Received Account Verify response but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        // TH-1A, TH-2A\n\n        currentTxFlowState.Completed(m.GetSuccessState(), m, \"Account Verify Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this._spi.CurrentTxFlowState}));\n    }\n    \n    _handlePreauthResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        var currentTxFlowState = this._spi.CurrentTxFlowState;\n        if (this._spi.CurrentFlow != SpiFlow.Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId)\n        {\n            this._log.info(`Received Preauth response but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        // TH-1A, TH-2A\n\n        currentTxFlowState.Completed(m.GetSuccessState(), m, \"Preauth Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this._spi.CurrentTxFlowState}));\n    }\n\n    static IsPreauthEvent(eventName)\n    {\n        return eventName.lastIndexOf(\"preauth\",0) === 0 \n                || eventName == PreauthEvents.PreauthCompleteResponse\n                || eventName == PreauthEvents.PreauthCompleteRequest\n                || eventName == PreauthEvents.AccountVerifyRequest\n                || eventName == PreauthEvents.AccountVerifyResponse;\n    }\n}\n","import {Events, Message} from './Messages';\nimport {RequestIdHelper} from './RequestIdHelper';\n\n// <summary>\n// Pairing Interaction 1: Outgoing\n// </summary>\nexport class PairRequest {\n    ToMessage() {\n        let data = {padding: true};\n        return new Message(RequestIdHelper.Id(\"pr\"), Events.PairRequest, data, false);\n    }\n}\n\n// Pairing Interaction 2: Incoming\nexport class KeyRequest {\n    constructor(m) {\n        this.RequestId = m.Id;\n        this.Aenc = m.Data.enc.A;\n        this.Ahmac = m.Data.hmac.A;\n    }\n}\n\n// Pairing Interaction 3: Outgoing\nexport class KeyResponse {\n    constructor(requestId, Benc, Bhmac) {\n        this.RequestId = requestId;\n        this.Benc = Benc;\n        this.Bhmac = Bhmac;\n    }\n\n    ToMessage() {\n        let data = {\n            enc: {\n                B: this.Benc\n            },\n            hmac: {\n                B: this.Bhmac\n            }\n        };\n\n        return new Message(this.RequestId, Events.KeyResponse, data, false);\n    }\n}\n\n// Pairing Interaction 4: Incoming\nexport class KeyCheck {\n    constructor(m) {\n        this.ConfirmationCode = m.IncomingHmac.substring(0,6);\n    }\n}\n\n// Pairing Interaction 5: Incoming\nexport class PairResponse {\n    constructor(m) {\n        this.Success = m.Data.success;\n    }\n}\n\n// Holder class for Secrets and KeyResponse, so that we can use them together in method signatures.\nexport class SecretsAndKeyResponse {\n    constructor(secrets, keyResponse) {\n        this.Secrets = secrets;\n        this.KeyResponse = keyResponse;\n    }\n}\n\nexport class DropKeysRequest\n{\n    ToMessage()\n    {\n        return new Message(RequestIdHelper.Id(\"drpkys\"), Events.DropKeysAdvice, null, true);\n    }\n}","import {Events, SuccessState, Message} from './Messages';\nimport {RequestIdHelper} from './RequestIdHelper';\n\nexport class SetPosInfoRequest\n{\n    constructor(version, vendorId, libraryLanguage, libraryVersion, otherInfo)\n    {\n        this._version = version;\n        this._vendorId = vendorId;\n        this._libraryLanguage = libraryLanguage;\n        this._libraryVersion = libraryVersion;\n        this._otherInfo = otherInfo;\n    }\n\n    toMessage()\n    {\n        var data = {\n            pos_version: this._version,\n            pos_vendor_id: this._vendorId,\n            library_language: this._libraryLanguage,\n            library_version: this._libraryVersion,\n            other_info: this._otherInfo\n        };\n\n        return new Message(RequestIdHelper.Id(\"prav\"), Events.SetPosInfoRequest, data, true);\n    }\n}\n\nexport class SetPosInfoResponse\n{\n    constructor(m)\n    {\n        this._success = m.GetSuccessState() == SuccessState.Success;\n        this._m = m;\n    }\n    isSuccess()\n    {\n        return this._success;\n    }\n    getErrorReason()\n    {\n        return this._m.Data.error_reason;\n    }\n    getErrorDetail()\n    {\n        return this._m.Data.error_detail;\n    }\n    getResponseValueWithAttribute(attribute)\n    {\n        return this._m.Data[attribute];\n    }\n}\n\nexport class DeviceInfo\n{\n    static GetAppDeviceInfo()\n    {\n        var deviceInfo = {};\n        deviceInfo['device_system'] = navigator.userAgent;\n        // deviceInfo.Add(\"device_system\", Environment.OSVersion.Platform.ToString() + \" \" + Environment.OSVersion.Version.ToString());\n        return deviceInfo;\n    }\n}\n","import {PurchaseRequest, RefundRequest} from './Purchase';\n\nexport class PurchaseHelper\n{\n    static CreatePurchaseRequest(amountCents, purchaseId)\n    {\n        return new PurchaseRequest(amountCents, purchaseId);\n    }\n    \n    static CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount)\n    {\n        var pr = Object.assign(new PurchaseRequest(purchaseAmount, posRefId),\n        {\n            CashoutAmount: cashoutAmount,\n            TipAmount: tipAmount,\n            PromptForCashout: promptForCashout,\n            SurchargeAmount: surchargeAmount\n        });\n\n        return pr;\n    }\n\n    static CreateRefundRequest(amountCents, purchaseId, isSuppressMerchantPassword)\n    {\n        return new RefundRequest(amountCents, purchaseId, isSuppressMerchantPassword);\n    }\n\n}\n","export class Secrets {\n    constructor(encKey, hmacKey) {\n        this.EncKey     = encKey;\n        this.HmacKey    = hmacKey;\n    }\n\n    static save(EncKey, HmacKey) {\n        localStorage.setItem('EncKey', EncKey);\n        localStorage.setItem('HmacKey', HmacKey);\n    }\n\n    static restore() {\n        return new Secrets(localStorage.getItem('EncKey'), localStorage.getItem('HmacKey'));\n    }\n\n    static isSaved() {\n        return localStorage.getItem('EncKey') && localStorage.getItem('HmacKey');\n    }\n\n    static Reset() {\n        localStorage.removeItem('EncKey');\n        localStorage.removeItem('HmacKey');\n    }\n}\n","import {Events, Message} from './Messages';\nimport {Crypto} from './Crypto';\nimport {Secrets} from './Secrets';\n\nexport class KeyRollingHelper {\n    static PerformKeyRolling(krRequest, currentSecrets)\n    {\n        let m = new Message(krRequest.Id, Events.KeyRollResponse, {\"status\": \"confirmed\"}, true);\n        let newSecrets = new Secrets(Crypto.GenerateHash(currentSecrets.EncKey).toUpperCase(),Crypto.GenerateHash(currentSecrets.HmacKey).toUpperCase());\n        return new KeyRollingResult(m, newSecrets);\n    }\n}\n\nexport class KeyRollingResult {\n    constructor(keyRollingConfirmation, newSecrets) {\n        this.KeyRollingConfirmation = keyRollingConfirmation;\n        this.NewSecrets = newSecrets;\n    }\n}\n","import {RequestIdHelper} from './RequestIdHelper';\nimport {Events, Message} from './Messages';\n\nexport class PongHelper\n{\n    static GeneratePongRessponse(ping)\n    {\n        return new Message(ping.Id, Events.Pong, null, true);\n    }\n}\n\nexport class PingHelper\n{\n    static GeneratePingRequest()\n    {\n        return new Message(RequestIdHelper.Id(\"ping\"), Events.Ping, null, true);\n    }\n}\n","export class DeviceIpAddressStatus\n{\n    constructor(ip, last_updated) \n    {\n        this.Ip = ip;\n        this.Last_updated = last_updated;\n    }\n}\n\nexport class DeviceIpAddressService\n{\n    constructor(apiUrl = null)\n    {\n        this.ApiUrl = apiUrl || 'https://device-address-api-dev.nonprod-wbc.msp.assemblypayments.com/v1/${serialNumber}/ip';\n    }\n\n    RetrieveService(serialNumber, apiKey = 'spi-sample-pos1')\n    {\n        var deviceIpUrl = this.ApiUrl.replace('${serialNumber}', serialNumber);\n\n        return fetch(deviceIpUrl, {\n            method: 'GET',\n            headers: {\n                \"ASM-MSP-DEVICE-ADDRESS-API-KEY\": apiKey\n            }\n        })\n        .then(response => response.json())\n        .catch((response) => {\n            console.error(`Status code ${response.StatusCode} received from ${deviceIpUrl} - Exception ${response.ErrorException}`);\n        })\n    }\n}\n","import {Message, MessageStamp, Events, SuccessState} from './Messages';\nimport {SpiConfig, SpiFlow, SpiStatus, PairingFlowState, TransactionFlowState, InitiateTxResult} from './SpiModels';\nimport {RequestIdHelper} from './RequestIdHelper';\nimport {SpiPayAtTable} from './SpiPayAtTable';\nimport {PayAtTableConfig} from './PayAtTable';\nimport {SpiPreauth} from './SpiPreauth';\nimport {DropKeysRequest} from './Pairing';\nimport {SetPosInfoRequest} from './PosInfo';\nimport {PurchaseHelper} from './PurchaseHelper';\nimport {KeyRollingHelper} from './KeyRollingHelper';\nimport {PingHelper, PongHelper} from './PingHelper';\nimport {GetLastTransactionRequest, CancelTransactionRequest, SignatureRequired, CancelTransactionResponse} from './Purchase';\nimport {DeviceIpAddressService, DeviceIpAddressStatus} from './Service/DeviceService';\n\nconst SPI_VERSION = '2.4.5';\n\nexport default class Spi {\n\n    get CurrentStatus() {\n        return this._currentStatus;\n    }\n\n    set CurrentStatus(value) {\n        if(this._currentStatus === value) {\n            return;\n        }\n\n        this._currentStatus = value;\n        document.dispatchEvent(new CustomEvent('StatusChanged', {detail: value}));\n    }\n\n    constructor(posId, eftposAddress, secrets, deviceIpAddressRequest) \n    {\n        this._posId = posId;\n        this._secrets = secrets;\n        this._eftposAddress = \"ws://\" + eftposAddress;\n        this._log = console;\n        this.Config = new SpiConfig();\n\n        if (deviceIpAddressRequest)\n        {\n            this._serialNumber = deviceIpAddressRequest.SerialNumber;\n            this._deviceApiKey = deviceIpAddressRequest.ApiKey;\n            this._deviceApiUrl = deviceIpAddressRequest.ApiUrl;\n        }\n\n        this.CurrentDeviceStatus = null;\n        this.AutoIpResolutionEnable = false;\n\n        // Our stamp for signing outgoing messages\n        this._spiMessageStamp = new MessageStamp(this._posId, this._secrets, 0);\n\n        this._posVendorId = null;\n        this._posVersion = null;\n        this._hasSetInfo = null;\n\n        // We will maintain some state\n        this._mostRecentPingSent = null;\n        this._mostRecentPongReceived = null;\n        this._missedPongsCount = 0;\n        this._retrySinceLastDeviceIpAddressResolution = 0;\n        this._mostRecentLoginResponse = null;\n\n        this._pongTimeout = 5000;\n        this._pingFrequency = 18000;\n        \n        this._readyToTransact = null;\n        this._periodicPingThread = null;\n\n        this._txMonitorCheckFrequency = 1000;\n        this._checkOnTxFrequency = 20000;\n        this._maxWaitForCancelTx = 10000;\n        this._missedPongsToDisconnect = 2;\n        this._retryBeforeResolvingDeviceIpAddress = 5;\n\n        this.CurrentFlow                = null;\n        this.CurrentPairingFlowState    = null;\n        this.CurrentTxFlowState         = null;\n    }\n\n    EnablePayAtTable()\n    {\n        this._spiPat = new SpiPayAtTable(this);\n        return this._spiPat;\n    }\n\n    EnablePreauth()\n    {\n        this._spiPreauth = new SpiPreauth(this);\n        return this._spiPreauth;\n    }\n\n    Start() {\n\n        if (!this._posVendorId || !this._posVersion)\n        {\n            // POS information is now required to be set\n            this._log.Warn(\"Missing POS vendor ID and version. posVendorId and posVersion are required before starting\");\n            throw new Exception(\"Missing POS vendor ID and version. posVendorId and posVersion are required before starting\");\n        }\n\n        this._resetConn();\n        this._startTransactionMonitoringThread();\n\n        this.CurrentFlow = SpiFlow.Idle;\n        if (this._secrets != null)\n        {\n            this._log.info(\"Starting in Paired State\");\n            this._currentStatus = SpiStatus.PairedConnecting;\n            this._conn.Connect(); // This is non-blocking\n        }\n        else\n        {\n            this._log.info(\"Starting in Unpaired State\");\n            this._currentStatus = SpiStatus.Unpaired;\n        } \n    }\n\n    // <summary>\n    // Allows you to set the PosId which identifies this instance of your POS.\n    // Can only be called in thge Unpaired state. \n    // </summary>\n    SetPosId(posId)\n    {\n        if (this.CurrentStatus != SpiStatus.Unpaired)\n            return false;\n\n        this._posId = posId;\n        this._spiMessageStamp.PosId = posId;\n        return true;\n    }\n\n    // <summary>\n    // Allows you to set the PinPad address. Sometimes the PinPad might change IP address \n    // (we recommend reserving static IPs if possible).\n    // Either way you need to allow your User to enter the IP address of the PinPad.\n    // </summary>\n    SetEftposAddress(address)\n    {\n        if (this.CurrentStatus == SpiStatus.PairedConnected) {\n            return false;\n        }\n\n        this._eftposAddress = \"ws://\" + address;\n        this._conn.Address = this._eftposAddress;\n        return true;\n    }\n\n    /// <summary>\n    /// Invoke ResolveDeviceIpAddress(). Once invoked, if Ip address changes it will trigger\n    /// _deviceIpChanged event.\n    /// </summary>\n    GetDeviceIpAddress(deviceIpAddressRequest)\n    {\n        if (this.CurrentStatus == SpiStatus.PairedConnected)\n            return;\n\n        // overwrite existing values with new request\n        this._serialNumber = deviceIpAddressRequest.SerialNumber;\n        this._deviceApiKey = deviceIpAddressRequest.ApiKey;\n        this._deviceApiUrl = deviceIpAddressRequest.ApiUrl;\n\n        this.ResolveDeviceIpAddress();\n    }\n\n    /**\n     * Sets values used to identify the POS software to the EFTPOS terminal.\n     * Must be set before starting!\n     *\n     * @param posVendorId Vendor identifier of the POS itself.\n     * @param posVersion  Version string of the POS itself.\n     */\n    SetPosInfo(posVendorId, posVersion)\n    {\n        this._posVendorId = posVendorId;\n        this._posVersion = posVersion;\n    }\n\n    // <summary>\n    // Call this one when a flow is finished and you want to go back to idle state.\n    // Typically when your user clicks the \"OK\" bubtton to acknowldge that pairing is\n    // finished, or that transaction is finished.\n    // When true, you can dismiss the flow screen and show back the idle screen.\n    // </summary>\n    // <returns>true means we have moved back to the Idle state. false means current flow was not finished yet.</returns>\n    AckFlowEndedAndBackToIdle()\n    {\n        if (this.CurrentFlow == SpiFlow.Idle)\n            return true; // already idle\n\n        if (this.CurrentFlow == SpiFlow.Pairing && this.CurrentPairingFlowState.Finished)\n        {\n            this.CurrentFlow = SpiFlow.Idle;\n            return true;\n        }\n        \n        if (this.CurrentFlow == SpiFlow.Transaction && this.CurrentTxFlowState.Finished)\n        {\n            this.CurrentFlow = SpiFlow.Idle;\n            return true;\n        }\n\n        return false;\n    }\n\n    static GetVersion()\n    {\n        return SPI_VERSION;\n    }\n    // endregion\n\n    // <summary>\n    // This will connect to the Eftpos and start the pairing process.\n    // Only call this if you are in the Unpaired state.\n    // Subscribe to the PairingFlowStateChanged event to get updates on the pairing process.\n    // </summary>\n    // <returns>Whether pairing has initiated or not</returns>\n    Pair()\n    {\n        if (this.CurrentStatus != SpiStatus.Unpaired) {\n            this._log.warn(\"Tried to Pair but we're already so.\");\n            return false;\n        }\n\n        if (!this._posId || !this._eftposAddress)\n        {\n            this._log.warn(\"Tried to Pair but missing posId or eftposAddress\");\n            return false;\n        }\n\n        this.CurrentFlow = SpiFlow.Pairing;\n        this.CurrentPairingFlowState = new PairingFlowState\n        ({\n            Successful: false,\n            Finished: false,\n            Message: \"Connecting...\",\n            AwaitingCheckFromEftpos: false,\n            AwaitingCheckFromPos: false,\n            ConfirmationCode: \"\"\n        });\n\n        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n        this._conn.Connect(); // Non-Blocking\n        return true;\n    }\n\n    // <summary>\n    // Call this when your user clicks yes to confirm the pairing code on your \n    // screen matches the one on the Eftpos.\n    // </summary>\n    PairingConfirmCode()\n    {\n        if (!this.CurrentPairingFlowState.AwaitingCheckFromPos)\n        {\n            // We weren't expecting this\n            return;\n        }\n\n        this.CurrentPairingFlowState.AwaitingCheckFromPos = false;\n        if (this.CurrentPairingFlowState.AwaitingCheckFromEftpos)\n        {\n            // But we are still waiting for confirmation from Eftpos side.\n            this._log.info(\"Pair Code Confirmed from POS side, but am still waiting for confirmation from Eftpos.\");\n            this.CurrentPairingFlowState.Message =\n                \"Click YES on EFTPOS if code is: \" + this.CurrentPairingFlowState.ConfirmationCode;\n            document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n        }\n        else\n        {\n            // Already confirmed from Eftpos - So all good now. We're Paired also from the POS perspective.\n            this._log.info(\"Pair Code Confirmed from POS side, and was already confirmed from Eftpos side. Pairing finalised.\");\n            this._onPairingSuccess();\n            this._onReadyToTransact();\n        }\n    }\n\n    // <summary>\n    // Call this if your user clicks CANCEL or NO during the pairing process.\n    // </summary>\n    PairingCancel()\n    {\n        if (this.CurrentFlow != SpiFlow.Pairing || this.CurrentPairingFlowState.Finished) {\n            return;\n        }\n\n        if (this.CurrentPairingFlowState.AwaitingCheckFromPos && !this.CurrentPairingFlowState.AwaitingCheckFromEftpos)\n        {\n            // This means that the Eftpos already thinks it's paired.\n            // Let's tell it to drop keys\n            this._send(new DropKeysRequest().ToMessage());\n        }\n        this._onPairingFailed();\n    }\n\n    // <summary>\n    // Call this when your uses clicks the Unpair button.\n    // This will disconnect from the Eftpos and forget the secrets.\n    // The CurrentState is then changed to Unpaired.\n    // Call this only if you are not yet in the Unpaired state.\n    // </summary>\n    Unpair()\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) {\n            return false;\n        }\n\n        if (this.CurrentFlow != SpiFlow.Idle) {\n            return false;\n        }\n        \n        // Best effort letting the eftpos know that we're dropping the keys, so it can drop them as well.\n        this._send(new DropKeysRequest().ToMessage());\n        this._doUnpair();\n        return true;\n    }\n\n    // endregion\n\n    // region Transaction Methods\n\n    // <summary>\n    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // </summary>\n    // <param name=\"posRefId\">Alphanumeric Identifier for your purchase.</param>\n    // <param name=\"amountCents\">Amount in Cents to charge</param>\n    // <returns>InitiateTxResult</returns>\n    InitiatePurchaseTx(posRefId, amountCents)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) {\n            return new InitiateTxResult(false, \"Not Paired\");\n        }\n\n        if (this.CurrentFlow != SpiFlow.Idle) {\n            return new InitiateTxResult(false, \"Not Idle\");\n        }\n\n        var purchaseRequest = PurchaseHelper.CreatePurchaseRequest(amountCents, posRefId);\n        purchaseRequest.Config = this.Config;\n        var purchaseMsg = purchaseRequest.ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.Purchase, amountCents, purchaseMsg,\n            `Waiting for EFTPOS connection to make payment request for ${amountCents / 100.0}`);\n        if (this._send(purchaseMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to accept payment for ${amountCents / 100.0}`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Purchase Initiated\");\n    }\n\n    // <summary>\n    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // <para>Tip and cashout are not allowed simultaneously.</para>\n    // </summary>\n    // <param name=\"posRefId\">An Unique Identifier for your Order/Purchase</param>\n    // <param name=\"purchaseAmount\">The Purchase Amount in Cents.</param>\n    // <param name=\"tipAmount\">The Tip Amount in Cents</param>\n    // <param name=\"cashoutAmount\">The Cashout Amount in Cents</param>\n    // <param name=\"promptForCashout\">Whether to prompt your customer for cashout on the Eftpos</param>\n    // <param name=\"options\">The Setting to set Header and Footer for the Receipt</param>\n    // <param name=\"surchargeAmount\">The Surcharge Amount in Cents</param>\n    // <returns>InitiateTxResult</returns>\n    InitiatePurchaseTxV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, options = {}, surchargeAmount = 0)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n\n        if (tipAmount > 0 && (cashoutAmount > 0 || promptForCashout)) return new InitiateTxResult(false, \"Cannot Accept Tips and Cashout at the same time.\");\n        \n        if (this.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n        this.CurrentFlow = SpiFlow.Transaction;\n        \n        var purchase = PurchaseHelper.CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount);\n        purchase.Config = this.Config;\n        purchase.Options = options;\n        var purchaseMsg = purchase.ToMessage();\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.Purchase, purchaseAmount, purchaseMsg,\n            `Waiting for EFTPOS connection to make payment request. ${purchase.AmountSummary()}`);\n        if (this._send(purchaseMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to accept payment for ${purchase.AmountSummary()}`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Purchase Initiated\");\n    }\n\n    // <summary>\n    // Initiates a refund transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // </summary>\n    // <param name=\"posRefId\">Alphanumeric Identifier for your refund.</param>\n    // <param name=\"amountCents\">Amount in Cents to charge</param>\n    // <param name=\"isSuppressMerchantPassword\">Merchant Password control in VAA</param>\n    // <returns>InitiateTxResult</returns>\n    InitiateRefundTx(posRefId, amountCents, isSuppressMerchantPassword = false)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) {\n            return new InitiateTxResult(false, \"Not Paired\");\n        }\n\n        if (this.CurrentFlow != SpiFlow.Idle) {\n            return new InitiateTxResult(false, \"Not Idle\");\n        }\n\n        var refundRequest = PurchaseHelper.CreateRefundRequest(amountCents, posRefId, isSuppressMerchantPassword);\n        refundRequest.Config = this.Config;\n        var refundMsg = refundRequest.ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.Refund, amountCents, refundMsg, \n            `Waiting for EFTPOS connection to make refund request for ${(amountCents / 100.0).toFixed(2)}`);\n        if (this._send(refundMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to refund ${(amountCents / 100.0).toFixed(2)}`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Refund Initiated\");\n    }\n    \n    // <summary>\n    // Let the EFTPOS know whether merchant accepted or declined the signature\n    // </summary>\n    // <param name=\"accepted\">whether merchant accepted the signature from customer or not</param>\n    AcceptSignature(accepted)\n    {\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingSignatureCheck)\n        {\n            this._log.info(\"Asked to accept signature but I was not waiting for one.\");\n            return new MidTxResult(false, \"Asked to accept signature but I was not waiting for one.\");\n        }\n\n        this.CurrentTxFlowState.SignatureResponded(accepted ? \"Accepting Signature...\" : \"Declining Signature...\");\n        var sigReqMsg = this.CurrentTxFlowState.SignatureRequiredMessage;\n        this._send(accepted\n            ? new SignatureAccept(this.CurrentTxFlowState.PosRefId).ToMessage()\n            : new SignatureDecline(this.CurrentTxFlowState.PosRefId).ToMessage());\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new MidTxResult(true, \"\");\n    }\n\n    // <summary>\n    // Submit the Code obtained by your user when phoning for auth. \n    // It will return immediately to tell you whether the code has a valid format or not. \n    // If valid==true is returned, no need to do anything else. Expect updates via standard callback.\n    // If valid==false is returned, you can show your user the accompanying message, and invite them to enter another code. \n    // </summary>\n    // <param name=\"authCode\">The code obtained by your user from the merchant call centre. It should be a 6-character alpha-numeric value.</param>\n    // <returns>Whether code has a valid format or not.</returns>\n    SubmitAuthCode(authCode)\n    {\n        if (authCode.length != 6)\n        {\n            return new SubmitAuthCodeResult(false, \"Not a 6-digit code.\");    \n        }\n                \n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingPhoneForAuth)\n        {\n            this._log.info(\"Asked to send auth code but I was not waiting for one.\");\n            return new SubmitAuthCodeResult(false, \"Was not waiting for one.\");\n        }\n\n        this.CurrentTxFlowState.AuthCodeSent(`Submitting Auth Code ${authCode}`);\n        this._send(new AuthCodeAdvice(this.CurrentTxFlowState.PosRefId, authCode).ToMessage());\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new SubmitAuthCodeResult(true, \"Valid Code.\");\n    }\n\n    // <summary>\n    // Attempts to cancel a Transaction. \n    // Be subscribed to TxFlowStateChanged event to see how it goes.\n    // Wait for the transaction to be finished and then see whether cancellation was successful or not.\n    // </summary>\n    // <returns>MidTxResult - false only if you called it in the wrong state</returns>\n    CancelTransaction()\n    {\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished)\n        {\n            this._log.info(\"Asked to cancel transaction but I was not in the middle of one.\");\n            return new MidTxResult(false, \"Asked to cancel transaction but I was not in the middle of one.\");\n        }\n\n        // TH-1C, TH-3C - Merchant pressed cancel\n        if (this.CurrentTxFlowState.RequestSent)\n        {\n            var cancelReq = new CancelTransactionRequest();\n            this.CurrentTxFlowState.Cancelling(\"Attempting to Cancel Transaction...\");\n            this._send(cancelReq.ToMessage());\n        }\n        else\n        {\n            // We Had Not Even Sent Request Yet. Consider as known failed.\n            this.CurrentTxFlowState.Failed(null, \"Transaction Cancelled. Request Had not even been sent yet.\");\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new MidTxResult(true, \"\");\n    }\n\n    // <summary>\n    // Initiates a cashout only transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // </summary>\n    // <param name=\"posRefId\">Alphanumeric Identifier for your transaction.</param>\n    // <param name=\"amountCents\">Amount in Cents to cash out</param>\n    // <param name=\"surchargeAmount\">The Surcharge Amount in Cents</param>\n    // <returns>InitiateTxResult</returns>\n    InitiateCashoutOnlyTx(posRefId, amountCents, surchargeAmount = 0)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n\n        if (this.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n        var cashoutOnlyRequest = new CashoutOnlyRequest(amountCents, posRefId, surchargeAmount);\n        cashoutOnlyRequest.Config = this.Config;\n        var cashoutMsg = cashoutOnlyRequest.ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.CashoutOnly, amountCents, cashoutMsg,\n            `Waiting for EFTPOS connection to send cashout request for ${(amountCents / 100).toFixed(2)}`);\n        if (this._send(cashoutMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to do cashout for ${(amountCents / 100).toFixed(2)}`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Cashout Initiated\");\n    }    \n\n    // <summary>\n    // Initiates a Mail Order / Telephone Order Purchase Transaction\n    // </summary>\n    // <param name=\"posRefId\">Alphanumeric Identifier for your transaction.</param>\n    // <param name=\"amountCents\">Amount in Cents</param>\n    // <param name=\"surchargeAmount\">The Surcharge Amount in Cents</param>\n    // <returns>InitiateTxResult</returns>\n    InitiateMotoPurchaseTx(posRefId, amountCents, surchargeAmount = 0)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n\n        if (this.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n        var motoPurchaseRequest = new MotoPurchaseRequest(amountCents, posRefId, surchargeAmount);\n        motoPurchaseRequest.Config = this.Config;\n        var cashoutMsg = motoPurchaseRequest.ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.MOTO, amountCents, cashoutMsg,\n            `Waiting for EFTPOS connection to send MOTO request for ${(amountCents / 100).toFixed(2)}`);\n        if (this._send(cashoutMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS do MOTO for ${(amountCents / 100).toFixed(2)}`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"MOTO Initiated\");\n    }\n\n    // <summary>\n    // Initiates a settlement transaction.\n    // Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // </summary>\n    InitiateSettleTx(posRefId)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) {\n            return new InitiateTxResult(false, \"Not Paired\");\n        }\n\n        if (this.CurrentFlow != SpiFlow.Idle) {\n            return new InitiateTxResult(false, \"Not Idle\");\n        }\n\n        var settleRequestMsg = new SettleRequest(RequestIdHelper.Id(\"settle\")).ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.Settle, 0, settleRequestMsg, \n            `Waiting for EFTPOS connection to make a settle request`);\n\n        if (this._send(settleRequestMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to settle.`);\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Settle Initiated\");   \n    }\n\n    // <summary>\n    // </summary>\n    InitiateSettlementEnquiry(posRefId)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n\n        if (this.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n        var stlEnqMsg = new SettlementEnquiryRequest(RequestIdHelper.Id(\"stlenq\")).ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.SettlementEnquiry, 0, stlEnqMsg,\n            \"Waiting for EFTPOS connection to make a settlement enquiry\");\n        if (this._send(stlEnqMsg))\n        {\n            this.CurrentTxFlowState.Sent(\"Asked EFTPOS to make a settlement enquiry.\");\n        }\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Settle Initiated\");   \n    }\n\n    // <summary>\n    // Initiates a Get Last Transaction. Use this when you want to retrieve the most recent transaction\n    // that was processed by the Eftpos.\n    // Be subscribed to TxFlowStateChanged event to get updates on the process.\n    // </summary>\n    InitiateGetLastTx()\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) {\n            return new InitiateTxResult(false, \"Not Paired\");\n        }\n\n        if (this.CurrentFlow != SpiFlow.Idle) {\n            return new InitiateTxResult(false, \"Not Idle\");\n        }\n\n        var gltRequestMsg = new GetLastTransactionRequest().ToMessage();\n        this.CurrentFlow = SpiFlow.Transaction;\n        var posRefId = gltRequestMsg.Id; // GetLastTx is not trying to get anything specific back. So we just use the message id.\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, TransactionType.GetLastTransaction, 0, gltRequestMsg, \n            \"Waiting for EFTPOS connection to make a Get-Last-Transaction request.\");\n        \n        if (this._send(gltRequestMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS for last transaction.`);\n        }\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"GLT Initiated\");   \n    }\n\n    // <summary>\n    // This is useful to recover from your POS crashing in the middle of a transaction.\n    // When you restart your POS, if you had saved enough state, you can call this method to recover the client library state.\n    // You need to have the posRefId that you passed in with the original transaction, and the transaction type.\n    // This method will return immediately whether recovery has started or not.\n    // If recovery has started, you need to bring up the transaction modal to your user a be listening to TxFlowStateChanged.\n    // </summary>\n    // <param name=\"posRefId\">The is that you had assigned to the transaction that you are trying to recover.</param>\n    // <param name=\"txType\">The transaction type.</param>\n    // <returns></returns>\n    InitiateRecovery(posRefId, txType)\n    {\n        if (this.CurrentStatus == SpiStatus.Unpaired) return new InitiateTxResult(false, \"Not Paired\");\n    \n        if (this.CurrentFlow != SpiFlow.Idle) return new InitiateTxResult(false, \"Not Idle\");\n        \n        this.CurrentFlow = SpiFlow.Transaction;\n        \n        var gltRequestMsg = new GetLastTransactionRequest().ToMessage();\n        this.CurrentTxFlowState = new TransactionFlowState(\n            posRefId, txType, 0, gltRequestMsg, \n            \"Waiting for EFTPOS connection to attempt recovery.\");\n        \n        if (this._send(gltRequestMsg))\n        {\n            this.CurrentTxFlowState.Sent(`Asked EFTPOS to recover state.`);\n        }\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        return new InitiateTxResult(true, \"Recovery Initiated\");\n    }\n\n    // <summary>\n    // GltMatch attempts to conclude whether a gltResponse matches an expected transaction and returns\n    // the outcome. \n    // If Success/Failed is returned, it means that the gtlResponse did match, and that transaction was succesful/failed.\n    // If Unknown is returned, it means that the gltResponse does not match the expected transaction. \n    // </summary>\n    // <param name=\"gltResponse\">The GetLastTransactionResponse message to check</param>\n    // <param name=\"posRefId\">The Reference Id that you passed in with the original request.</param>\n\n    // <returns></returns>\n    GltMatch(gltResponse, posRefId, ...deprecatedArgs) \n    {\n        // Obsolete method call check\n        // Old interface: GltMatch(GetLastTransactionResponse gltResponse, TransactionType expectedType, int expectedAmount, DateTime requestTime, string posRefId)\n        if(deprecatedArgs.length) {\n            if(deprecatedArgs.length == 2) {\n                this._log.info(\"Obsolete method call detected: Use GltMatch(gltResponse, posRefId)\");\n                return this.GltMatch(gltResponse, deprecatedArgs[2]);\n            } else {\n                throw new Error(\"Obsolete method call with unknown args: Use GltMatch(GetLastTransactionResponse gltResponse, string posRefId)\");\n            }\n        }\n\n        this._log.info(`GLT CHECK: PosRefId: ${posRefId}->${gltResponse.GetPosRefId()}`);\n\n        if (!posRefId == gltResponse.GetPosRefId())\n        {\n            return SuccessState.Unknown;\n        }\n\n        return gltResponse.GetSuccessState();\n    }\n\n    PrintReceipt(key, payload)\n    {\n        this._send(new PrintingRequest(key, payload).toMessage());\n    }\n\n    \n    GetTerminalStatus()\n    {\n        this._send(new TerminalStatusRequest().ToMessage());\n    }\n\n    // endregion\n        \n    // region Internals for Pairing Flow\n\n    // <summary>\n    // Handling the 2nd interaction of the pairing process, i.e. an incoming KeyRequest.\n    // </summary>\n    // <param name=\"m\">incoming message</param>\n    _handleKeyRequest(m)\n    {\n        this.CurrentPairingFlowState.Message = \"Negotiating Pairing...\";\n        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n\n        // Use the helper. It takes the incoming request, and generates the secrets and the response.\n        var ph      = new PairingHelper();\n        var result  = ph.GenerateSecretsAndKeyResponse(new KeyRequest(m));\n        this._secrets = result.Secrets; // we now have secrets, although pairing is not fully finished yet.\n        this._spiMessageStamp.Secrets = this._secrets; // updating our stamp with the secrets so can encrypt messages later.\n        this._send(result.KeyResponse.ToMessage()); // send the key_response, i.e. interaction 3 of pairing.\n    }\n\n    // <summary>\n    // Handling the 4th interaction of the pairing process i.e. an incoming KeyCheck.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleKeyCheck(m)\n    {\n        var keyCheck = new KeyCheck(m);\n        this.CurrentPairingFlowState.ConfirmationCode = keyCheck.ConfirmationCode;\n        this.CurrentPairingFlowState.AwaitingCheckFromEftpos = true;\n        this.CurrentPairingFlowState.AwaitingCheckFromPos = true;\n        this.CurrentPairingFlowState.Message = \"Confirm that the following Code is showing on the Terminal\";\n        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n    }\n\n    // <summary>\n    // Handling the 5th and final interaction of the pairing process, i.e. an incoming PairResponse\n    // </summary>\n    // <param name=\"m\"></param>\n    _handlePairResponse(m)\n    {\n        var pairResp = new PairResponse(m);\n\n        this.CurrentPairingFlowState.AwaitingCheckFromEftpos = false;\n        if (pairResp.Success)\n        {\n            if (this.CurrentPairingFlowState.AwaitingCheckFromPos)\n            {\n                // Still Waiting for User to say yes on POS\n                this._log.info(\"Got Pair Confirm from Eftpos, but still waiting for use to confirm from POS.\");\n                this.CurrentPairingFlowState.Message = \"Confirm that the following Code is what the EFTPOS showed\";\n                document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n            }\n            else\n            {\n                this._log.info(\"Got Pair Confirm from Eftpos, and already had confirm from POS. Now just waiting for first pong.\");\n                this._onPairingSuccess();\n            }\n            // I need to ping/login even if the pos user has not said yes yet, \n            // because otherwise within 5 seconds connectiong will be dropped by eftpos.\n            this._startPeriodicPing();\n        }\n        else\n        {\n            this._onPairingFailed();\n        }\n    }\n\n    _handleDropKeysAdvice(m)\n    {\n        this._log.Info(\"Eftpos was Unpaired. I shall unpair from my end as well.\");\n        this._doUnpair();\n    }\n\n    _onPairingSuccess()\n    {\n        this.CurrentPairingFlowState.Successful = true;\n        this.CurrentPairingFlowState.Finished = true;\n        this.CurrentPairingFlowState.Message = \"Pairing Successful!\";\n        this.CurrentStatus = SpiStatus.PairedConnected;\n        document.dispatchEvent(new CustomEvent('SecretsChanged', {detail: this._secrets}));\n        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n    }\n\n    _onPairingFailed()\n    {\n        this._secrets = null;\n        this._spiMessageStamp.Secrets = null;\n        this._conn.Disconnect();\n\n        this.CurrentStatus = SpiStatus.Unpaired;\n        this.CurrentPairingFlowState.Message = \"Pairing Failed\";\n        this.CurrentPairingFlowState.Finished = true;\n        this.CurrentPairingFlowState.Successful = false;\n        this.CurrentPairingFlowState.AwaitingCheckFromPos = false;\n        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n    }\n\n    _doUnpair()\n    {\n        this.CurrentStatus = SpiStatus.Unpaired;\n        this._conn.Disconnect();\n        this._secrets = null;\n        this._spiMessageStamp.Secrets = null;\n        document.dispatchEvent(new CustomEvent('SecretsChanged', {detail: this._secrets}));\n    }\n\n    // <summary>\n    // Sometimes the server asks us to roll our secrets.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleKeyRollingRequest(m)\n    {\n        // we calculate the new ones...\n        var krRes = KeyRollingHelper.PerformKeyRolling(m, this._secrets);\n        this._secrets = krRes.NewSecrets; // and update our secrets with them\n        this._spiMessageStamp.Secrets = this._secrets; // and our stamp\n        this._send(krRes.KeyRollingConfirmation); // and we tell the server that all is well.\n        document.dispatchEvent(new CustomEvent('SecretsChanged', {detail: this._secrets}));\n    }\n\n    // <summary>\n    // The PinPad server will send us this message when a customer signature is reqired.\n    // We need to ask the customer to sign the incoming receipt.\n    // And then tell the pinpad whether the signature is ok or not.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleSignatureRequired(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.info(`Received Signature Required but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        this.CurrentTxFlowState.SignatureRequired(new SignatureRequired(m), \"Ask Customer to Sign the Receipt\");\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // The PinPad server will send us this message when an auth code is required.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleAuthCodeRequired(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            _log.Info(`Received Auth Code Required but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        var phoneForAuthRequired = new PhoneForAuthRequired(m);\n        var msg = `Auth Code Required. Call ${phoneForAuthRequired.GetPhoneNumber()} and quote merchant id ${phoneForAuthRequired.GetMerchantId()}`;\n        this.CurrentTxFlowState.PhoneForAuthRequired(phoneForAuthRequired, msg);\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // The PinPad server will reply to our PurchaseRequest with a PurchaseResponse.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handlePurchaseResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.info(`Received Purchase response but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}\"`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Purchase Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // The PinPad server will reply to our CashoutOnlyRequest with a CashoutOnlyResponse.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleCashoutOnlyResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.info(`Received Cashout Response but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Cashout Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // The PinPad server will reply to our MotoPurchaseRequest with a MotoPurchaseResponse.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleMotoPurchaseResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.info(`Received Moto Response but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Moto Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }   \n\n    // <summary>\n    // The PinPad server will reply to our RefundRequest with a RefundResponse.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleRefundResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished | !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.info(`Received Refund response but I was not waiting for this one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Refund Transaction Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // TODO: Handle the Settlement Response received from the PinPad\n    // </summary>\n    // <param name=\"m\"></param>\n    HandleSettleResponse(m)\n    {\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished)\n        {\n            this._log.info(`Received Settle response but I was not waiting for one. ${m.DecryptedJson}`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Settle Transaction Ended.\");\n        // TH-6A, TH-6E\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // Handle the Settlement Enquiry Response received from the PinPad\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleSettlementEnquiryResponse(m)\n    {\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished)\n        {\n            this._log.info(`Received Settlement Enquiry response but I was not waiting for one. ${m.DecryptedJson}`);\n            return;\n        }\n        // TH-1A, TH-2A\n        \n        this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, \"Settlement Enquiry Ended.\");\n        // TH-6A, TH-6E\n        \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n    }\n\n    // <summary>\n    // Sometimes we receive event type \"error\" from the server, such as when calling cancel_transaction and there is no transaction in progress.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleErrorEvent(m)\n    {\n        if (this.CurrentFlow == SpiFlow.Transaction\n            && !this.CurrentTxFlowState.Finished\n            && this.CurrentTxFlowState.AttemptingToCancel\n            && m.GetError() == \"NO_TRANSACTION\")\n        {\n            // TH-2E\n            this._log.info(`Was trying to cancel a transaction but there is nothing to cancel. Calling GLT to see what's up`);\n            this._callGetLastTransaction();\n        }\n        else\n        {\n            this._log.info(`Received Error Event But Don't know what to do with it. ${m.DecryptedJson}`);\n        }\n    }\n\n    // <summary>\n    // When the PinPad returns to us what the Last Transaction was.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleGetLastTransactionResponse(m)\n    {\n        var txState = this.CurrentTxFlowState;\n        if (this.CurrentFlow != SpiFlow.Transaction || txState.Finished)\n        {\n            // We were not in the middle of a transaction, who cares?\n            return;\n        }\n\n        // TH-4 We were in the middle of a transaction.\n        // Let's attempt recovery. This is step 4 of Transaction Processing Handling\n        this._log.info(`Got Last Transaction..`);\n        txState.GotGltResponse();\n        var gtlResponse = new GetLastTransactionResponse(m);\n        txState.GLTResponsePosRefId = gtlResponse.GetPosRefId();\n        if (!gtlResponse.WasRetrievedSuccessfully())\n        {\n            if (gtlResponse.IsStillInProgress(txState.PosRefId))\n            {\n                // TH-4E - Operation In Progress\n\n                if (gtlResponse.IsWaitingForSignatureResponse() && !txState.AwaitingSignatureCheck)\n                {\n                    this._log.info(\"Eftpos is waiting for us to send it signature accept/decline, but we were not aware of this. \" +\n                              \"The user can only really decline at this stage as there is no receipt to print for signing.\");\n                    this.CurrentTxFlowState.SignatureRequired(new SignatureRequired(txState.PosRefId, m.Id, \"MISSING RECEIPT\\n DECLINE AND TRY AGAIN.\"), \"Recovered in Signature Required but we don't have receipt. You may Decline then Retry.\");\n                }\n                else if (gtlResponse.IsWaitingForAuthCode() && !txState.AwaitingPhoneForAuth)\n                {\n                    this._log.info(\"Eftpos is waiting for us to send it auth code, but we were not aware of this. \" +\n                              \"We can only cancel the transaction at this stage as we don't have enough information to recover from this.\");\n                    this.CurrentTxFlowState.PhoneForAuthRequired(new PhoneForAuthRequired(txState.PosRefId, m.Id, \"UNKNOWN\", \"UNKNOWN\"), \"Recovered mid Phone-For-Auth but don't have details. You may Cancel then Retry.\");\n                }\n                else\n                {\n                    this._log.info(\"Operation still in progress... stay waiting.\");\n                    // No need to publish txFlowStateChanged. Can return;\n                    return;\n                }\n            }\n            else if (gtlResponse.WasTimeOutOfSyncError())\n            {\n                // Let's not give up based on a TOOS error.\n                // Let's log it, and ignore it. \n                this._log.info(`Time-Out-Of-Sync error in Get Last Transaction response. Let's ignore it and we'll try again.`);\n                // No need to publish txFlowStateChanged. Can return;\n                return;\n            }\n            else\n            {\n                // TH-4X - Unexpected Response when recovering\n                this._log.info(`Unexpected Response in Get Last Transaction during - Received posRefId:${gtlResponse.GetPosRefId()} Error:${m.GetError()}`);\n                txState.UnknownCompleted(\"Unexpected Error when recovering Transaction Status. Check EFTPOS. \");\n            }\n        }\n        else\n        {\n            if (txState.Type == TransactionType.GetLastTransaction)\n            {\n                // THIS WAS A PLAIN GET LAST TRANSACTION REQUEST, NOT FOR RECOVERY PURPOSES.\n                this._log.info(\"Retrieved Last Transaction as asked directly by the user.\");\n                gtlResponse.CopyMerchantReceiptToCustomerReceipt();\n                txState.Completed(m.GetSuccessState(), m, \"Last Transaction Retrieved\");\n            }\n            else\n            {\n                // TH-4A - Let's try to match the received last transaction against the current transaction\n                var successState = this.GltMatch(gtlResponse, txState.PosRefId);\n                if (successState == SuccessState.Unknown)\n                {\n                    // TH-4N: Didn't Match our transaction. Consider Unknown State.\n                    this._log.info(\"Did not match transaction.\");\n                    txState.UnknownCompleted(\"Failed to recover Transaction Status. Check EFTPOS. \");\n                }\n                else\n                {\n                    // TH-4Y: We Matched, transaction finished, let's update ourselves\n                    gtlResponse.CopyMerchantReceiptToCustomerReceipt();\n                    txState.Completed(successState, m, \"Transaction Ended.\");\n                }\n            } \n        }\n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: txState}));\n    }\n\n    //When the transaction cancel response is returned.\n    _handleCancelTransactionResponse(m)\n    {\n        var incomingPosRefId = m.Data.pos_ref_id;\n        if (this.CurrentFlow != SpiFlow.Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId)\n        {\n            this._log.Info(`Received Cancel Required but I was not waiting for one. Incoming Pos Ref ID: ${incomingPosRefId}`);\n            return;\n        }\n\n        var txState = this.CurrentTxFlowState;\n        var cancelResponse = new CancelTransactionResponse(m);\n\n        if (cancelResponse.Success) return;\n\n        this._log.Warn(\"Failed to cancel transaction: reason=\" + cancelResponse.GetErrorReason() + \", detail=\" + cancelResponse.GetErrorDetail());\n\n        txState.CancelFailed(\"Failed to cancel transaction: \" + cancelResponse.GetErrorDetail() + \". Check EFTPOS.\");\n    \n        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: txState}));\n    }\n\n    _handleSetPosInfoResponse(m)\n    {\n        var response = new SetPosInfoResponse(m);\n        if (response.isSuccess())\n        {\n            this._hasSetInfo = true;\n            this._log.Info(\"Setting POS info successful\");\n        }\n        else\n        {\n            this._log.Warn(\"Setting POS info failed: reason=\" + response.getErrorReason() + \", detail=\" + response.getErrorDetail());\n        }\n    }\n\n    _startTransactionMonitoringThread()\n    {\n        var needsPublishing = false;\n    \n        var txState = this.CurrentTxFlowState;\n        if (this.CurrentFlow == SpiFlow.Transaction && !txState.Finished)\n        {\n            var state = txState;\n            if (state.AttemptingToCancel && Date.now() > state.CancelAttemptTime + this._maxWaitForCancelTx)\n            {\n                // TH-2T - too long since cancel attempt - Consider unknown\n                this._log.info(`Been too long waiting for transaction to cancel.`);\n                txState.UnknownCompleted(`Waited long enough for Cancel Transaction result. Check EFTPOS. `);\n                needsPublishing = true;\n            }\n            else if (state.RequestSent && Date.now() > state.LastStateRequestTime + this._checkOnTxFrequency)\n            {\n                // TH-1T, TH-4T - It's been a while since we received an update, let's call a GLT\n                this._log.info(`Checking on our transaction. Last we asked was at ${state.LastStateRequestTime}...`);\n                txState.CallingGlt();\n                this._callGetLastTransaction();\n            }\n        }\n        \n        if (needsPublishing) {\n            document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n        }\n\n        setTimeout(() => this._startTransactionMonitoringThread(), this._txMonitorCheckFrequency);\n    }\n\n    PrintingResponse(m) {\n        throw new Exception('Method not implemented. Please overwrite this method in your POS');\n    }\n\n    TerminalStatusResponse(m) {\n        throw new Exception('Method not implemented. Please overwrite this method in your POS');\n    }\n\n    BatteryLevelChanged(m) {\n        throw new Exception('Method not implemented. Please overwrite this method in your POS');\n    }\n\n    _handlePrintingResponse(m)\n    {\n        this.PrintingResponse(m);\n    }\n\n    _handleTerminalStatusResponse(m)\n    {\n        this.TerminalStatusResponse(m);\n    }\n\n    _handleBatteryLevelChanged(m)\n    {\n        this.BatteryLevelChanged(m);\n    }\n\n    // endregion\n        \n    // region Internals for Connection Management\n\n    _resetConn()\n    {\n        // Setup the Connection\n        this._conn = new Connection();\n        this._conn.Address = this._eftposAddress;\n\n        // Register our Event Handlers\n        document.addEventListener('ConnectionStatusChanged', (e) => this._onSpiConnectionStatusChanged(e.detail));\n        document.addEventListener('MessageReceived', (e) => this._onSpiMessageReceived(e.detail));\n        document.addEventListener('ErrorReceived', (e) => this._onWsErrorReceived(e.detail));\n    }\n\n    // <summary>\n    // This method will be called when the connection status changes.\n    // You are encouraged to display a PinPad Connection Indicator on the POS screen.\n    // </summary>\n    // <param name=\"state\"></param>\n    _onSpiConnectionStatusChanged(state)\n    {\n        switch (state.ConnectionState)\n        {\n            case ConnectionState.Connecting:\n                this._log.info(`I'm Connecting to the Eftpos at ${this._eftposAddress}...`);\n                break;\n\n            case ConnectionState.Connected:\n                this._retrySinceLastDeviceIpAddressResolution = 0;\n\n                if (this.CurrentFlow == SpiFlow.Pairing && this.CurrentStatus == SpiStatus.Unpaired)\n                {\n                    this.CurrentPairingFlowState.Message = \"Requesting to Pair...\";\n                    document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n                    var pr = PairingHelper.NewPairRequest();\n                    this._send(pr.ToMessage());\n                }\n                else\n                {\n                    this._log.info(`I'm Connected to ${this._eftposAddress}...`);\n                    this._spiMessageStamp.Secrets = this._secrets;\n                    this._startPeriodicPing();\n                }\n                break;\n\n            case ConnectionState.Disconnected:\n                // Let's reset some lifecycle related to connection state, ready for next connection\n                this._log.info(`I'm disconnected from ${this._eftposAddress}...`);\n                this._mostRecentPingSent = null;\n                this._mostRecentPongReceived = null;\n                this._missedPongsCount = 0;\n                this._stopPeriodicPing();\n\n                if (this.CurrentStatus != SpiStatus.Unpaired)\n                {\n                    this.CurrentStatus = SpiStatus.PairedConnecting;\n\n                    if (this.CurrentFlow == SpiFlow.Transaction && !this.CurrentTxFlowState.Finished)\n                    {\n                        // we're in the middle of a transaction, just so you know!\n                        // TH-1D\n                        this._log.info(`Lost connection in the middle of a transaction...`);\n                    }\n                    \n                    if (this._conn == null) return; // This means the instance has been disposed. Aborting.\n                    \n                    if (this._retrySinceLastDeviceIpAddressResolution >= this._retryBeforeResolvingDeviceIpAddress)\n                    {\n                        this.ResolveDeviceIpAddress();\n                        this._retrySinceLastDeviceIpAddressResolution = 0;\n                    }\n                    else\n                    {\n                        this._retrySinceLastDeviceIpAddressResolution += 1;\n                        this._log.info(`Will try to reconnect in 5s...`);\n                        setTimeout(() => {\n                            if (this.CurrentStatus != SpiStatus.Unpaired)\n                            {\n                                // This is non-blocking\n                                this._conn.Connect();\n                            }\n                        }, 5000);\n                    }\n                }\n                else if (this.CurrentFlow == SpiFlow.Pairing)\n                {\n                    this._log.info(\"Lost Connection during pairing.\");\n                    this.CurrentPairingFlowState.Message = \"Could not Connect to Pair. Check Network and Try Again...\";\n                    this._onPairingFailed();\n                    document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {detail: this.CurrentPairingFlowState}));\n                }\n                break;\n            default:\n                throw new Exception('Unknown state: ' + state);\n        }\n    }\n\n    // <summary>\n    // This is an important piece of the puzzle. It's a background thread that periodically\n    // sends Pings to the server. If it doesn't receive Pongs, it considers the connection as broken\n    // so it disconnects. \n    // </summary>\n    _startPeriodicPing() {\n        this._stopPeriodicPing();\n        this._periodicPingThread = setInterval(() => this._periodicPing(),this._pingFrequency);\n        this._periodicPing();\n    }\n\n    _periodicPing() {\n        // while i'm still connected AND paired...\n        if(this._conn.Connected && this._secrets != null) {\n            this._doPing();\n\n            setTimeout(() => {\n                if (this._mostRecentPingSent != null &&\n                    (this._mostRecentPongReceived == null || this._mostRecentPongReceived.Id != this._mostRecentPingSent.Id))\n                {\n                    this._missedPongsCount += 1;\n\n                    this._log.info(`Eftpos didn't reply to my Ping. Missed Count: ${this._missedPongsCount}/${this._missedPongsToDisconnect}.`);\n\n                    if (this._missedPongsCount < this._missedPongsToDisconnect)\n                    {\n                        this._log.info(\"Trying another ping...\");\n                        this._startPeriodicPing();\n                        return;\n                    }\n\n                    // This means that we have not received a pong for our most recent ping.\n                    // We consider this connection as broken.\n                    // Let's Disconnect.\n                    this._log.info(\"Disconnecting...\");\n                    this._conn.Disconnect();\n                    this._stopPeriodicPing();\n                }\n\n                this._missedPongsCount = 0;\n\n            },this._pongTimeout);\n\n        } else {\n            this._stopPeriodicPing();\n            this._log.info(\"Cancelling periodic ping as were disconnected or not paired\");\n        }\n    }\n\n    // <summary>\n    // We call this ourselves as soon as we're ready to transact with the PinPad after a connection is established.\n    // This function is effectively called after we received the first Login Response from the PinPad.\n    // </summary>\n    _onReadyToTransact()\n    {\n        this._log.info(\"On Ready To Transact!\");\n\n        // So, we have just made a connection, pinged and logged in successfully.\n        this.CurrentStatus = SpiStatus.PairedConnected;\n\n        if (this.CurrentFlow == SpiFlow.Transaction && !this.CurrentTxFlowState.Finished)\n        {\n            if (this.CurrentTxFlowState.RequestSent)\n            {\n                // TH-3A - We've just reconnected and were in the middle of Tx.\n                // Let's get the last transaction to check what we might have missed out on.\n                this.CurrentTxFlowState.CallingGlt();\n                this._callGetLastTransaction();\n            }\n            else\n            {\n                // TH-3AR - We had not even sent the request yet. Let's do that now\n                this._send(this.CurrentTxFlowState.Request);\n                this.CurrentTxFlowState.Sent(`Sending Request Now...`);\n                document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {detail: this.CurrentTxFlowState}));\n            }\n        }\n        else\n        {\n            if (!this._hasSetInfo) { \n                this._callSetPosInfo(); \n            }\n\n            // let's also tell the eftpos our latest table configuration.\n            if(this._spiPat) {\n                this._spiPat.PushPayAtTableConfig();\n            }\n        }\n    }\n\n    _callSetPosInfo()\n    {\n        var setPosInfoRequest = new SetPosInfoRequest(this._posVersion, this._posVendorId, \"js\", this.GetVersion(), DeviceInfo.GetAppDeviceInfo());\n        this._send(setPosInfoRequest.toMessage());\n    }\n\n    // <summary>\n    // When we disconnect, we should also stop the periodic ping.\n    // </summary>\n    _stopPeriodicPing() {\n        if(this._periodicPingThread) {\n            // If we were already set up, clean up before restarting.\n            clearInterval(this._periodicPingThread);\n            this._periodicPingThread = null;\n        }\n    }\n\n    // Send a Ping to the Server\n    _doPing()\n    {\n        var ping = PingHelper.GeneratePingRequest();\n        this._mostRecentPingSent = ping;\n        this._send(ping);\n        this._mostRecentPingSentTime = Date.now();\n    }\n\n    // <summary>\n    // Received a Pong from the server\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleIncomingPong(m)\n    {\n        // We need to maintain this time delta otherwise the server will not accept our messages.\n        this._spiMessageStamp.ServerTimeDelta = m.GetServerTimeDelta();\n\n        if (this._mostRecentPongReceived == null)\n        {\n            // First pong received after a connection, and after the pairing process is fully finalised.\n            if (this.CurrentStatus != SpiStatus.Unpaired)\n            {\n                this._log.info(\"First pong of connection and in paired state.\");\n                this._onReadyToTransact();\n            }\n            else\n            {\n                this._log.info(\"First pong of connection but pairing process not finalised yet.\");\n            }\n        }\n\n        this._mostRecentPongReceived = m;\n        this._log.debug(`PongLatency:${Date.now() - this._mostRecentPingSentTime}`);\n    }\n\n    // <summary>\n    // The server will also send us pings. We need to reply with a pong so it doesn't disconnect us.\n    // </summary>\n    // <param name=\"m\"></param>\n    _handleIncomingPing(m)\n    {\n        var pong = PongHelper.GeneratePongRessponse(m);\n        this._send(pong);\n    }\n\n    // <summary>\n    // Ask the PinPad to tell us what the Most Recent Transaction was\n    // </summary>\n    _callGetLastTransaction()\n    {\n        var gltRequest = new GetLastTransactionRequest();\n        this._send(gltRequest.ToMessage());\n    }\n\n    // <summary>\n    // This method will be called whenever we receive a message from the Connection\n    // </summary>\n    // <param name=\"messageJson\"></param>\n    _onSpiMessageReceived(messageJson)\n    {\n        // First we parse the incoming message\n        var m = Message.FromJson(messageJson.Message, this._secrets);\n        this._log.info(\"Received:\" + m.DecryptedJson);\n\n        if (SpiPreauth.IsPreauthEvent(m.EventName))\n        {\n            this._spiPreauth._handlePreauthMessage(m);\n            return;\n        }\n\n        // And then we switch on the event type.\n        switch (m.EventName)\n        {\n            case Events.KeyRequest:\n                this._handleKeyRequest(m);\n                break;\n            case Events.KeyCheck:\n                this._handleKeyCheck(m);\n                break;\n            case Events.PairResponse:\n                this._handlePairResponse(m);\n                break;\n            case Events.DropKeysAdvice:\n                this._handleDropKeysAdvice(m);\n                break;\n            case Events.PurchaseResponse:\n                this._handlePurchaseResponse(m);\n                break;\n            case Events.RefundResponse:\n                this._handleRefundResponse(m);\n                break;\n            case Events.CashoutOnlyResponse:\n                this._handleCashoutOnlyResponse(m);\n                break;\n            case Events.MotoPurchaseResponse:\n                this._handleMotoPurchaseResponse(m);\n                break;\n            case Events.SignatureRequired:\n                this._handleSignatureRequired(m);\n                break;\n            case Events.AuthCodeRequired:\n                this._handleAuthCodeRequired(m);\n                break;\n            case Events.GetLastTransactionResponse:\n                this._handleGetLastTransactionResponse(m);\n                break;\n            case Events.SettleResponse:\n                this.HandleSettleResponse(m);\n                break;\n            case Events.SettlementEnquiryResponse:\n                this._handleSettlementEnquiryResponse(m);\n                break;\n            case Events.Ping:\n                this._handleIncomingPing(m);\n                break;\n            case Events.Pong:\n                this._handleIncomingPong(m);\n                break;\n            case Events.KeyRollRequest:\n                this._handleKeyRollingRequest(m);\n                break;\n            case Events.CancelTransactionResponse:\n                this._handleCancelTransactionResponse(m);\n                break;\n            case Events.SetPosInfoResponse:\n                this._handleSetPosInfoResponse(m);\n                break;\n            case Events.PayAtTableGetTableConfig:\n                if (this._spiPat == null)\n                {\n                    this._send(PayAtTableConfig.FeatureDisableMessage(RequestIdHelper.Id(\"patconf\")));\n                    break;\n                }\n                this._spiPat._handleGetTableConfig(m);\n                break;\n            case Events.PayAtTableGetBillDetails:\n                this._spiPat._handleGetBillDetailsRequest(m);\n                break;\n            case Events.PayAtTableBillPayment:\n                this._spiPat._handleBillPaymentAdvice(m);\n                break;\n            case Events.PrintingResponse:\n                this._handlePrintingResponse(m);\n                break;\n            case Events.TerminalStatusResponse:\n                this._handleTerminalStatusResponse(m);\n                break;\n            case Events.BatteryLevelChanged:\n                this._handleBatteryLevelChanged(m);\n                break;\n            case Events.Error:\n                this._handleErrorEvent(m);\n                break;\n            case Events.InvalidHmacSignature:\n                this._log.info(\"I could not verify message from Eftpos. You might have to Un-pair Eftpos and then reconnect.\");\n                break;\n            default:\n                this._log.info(`I don't Understand Event: ${m.EventName}, ${m.Data}. Perhaps I have not implemented it yet.`);\n                break;\n        }\n    }\n\n    _onWsErrorReceived(error)\n    {\n        this._log.warn(\"Received WS Error: \" + error.Message);\n    }\n\n    _send(message)\n    {\n        var json = message.ToJson(this._spiMessageStamp);\n        if (this._conn.Connected)\n        {\n            this._log.info(\"Sending: \" + message.DecryptedJson);\n            this._conn.Send(json);\n            return true;\n        }\n        else\n        {\n            this._log.info(\"Asked to send, but not connected: \" + message.DecryptedJson);\n            return false;\n        }\n    }\n\n    ResolveDeviceIpAddress()\n    {\n        if (!this.AutoIpResolutionEnable)\n            return;\n\n        var service = new DeviceIpAddressService(this._deviceApiUrl);\n\n        return service.RetrieveService(this._serialNumber, this._deviceApiKey).then((ip) => \n        {\n            if (ip && ip.Ip)\n            {\n                this.CurrentDeviceStatus = new DeviceIpAddressStatus(ip.Ip, ip.Last_updated);\n            }\n            document.dispatchEvent(new CustomEvent('DeviceIpChanged', {detail: this.CurrentDeviceStatus}));\n        });\n    }\n}\n\nexport {Spi};","export default class Logger {\n    constructor(element) {\n        this.buffer     = [];\n        this.element    = element;\n    }\n\n    Info(...args) {\n        this.buffer.push(args.join(' '));\n        this._render();\n    }\n\n    Debug(...args) {\n        this.buffer.push(args.join(' '));\n        this._render();\n    }\n\n    Warn(...args) {\n        this.buffer.push(args.join(' '));\n        this._render();\n    }\n\n    Error(...args) {\n        this.buffer.push(args.join(' '));\n        this._render();\n    }\n\n    Console(...args) {\n        console.log(args.join(' '));\n    }\n\n    _render() {\n        this.element.innerText = this.buffer.join('\\n');\n        this.element.scrollTop = this.element.scrollHeight;\n    }\n\n    Clear() {\n        this.buffer = [];\n        this._render();\n    }\n}\n\nexport {Logger};","import {Events, SuccessState, Message} from './Messages';\nimport {RequestIdHelper} from './RequestIdHelper';\n\nexport class PrintingRequest\n{\n    constructor(key, payload)\n    {\n        this._key = key;\n        this._payload = payload;\n    }\n\n    toMessage()\n    {\n        var data = {\n            \"key\": this._key,\n            \"payload\": this._payload\n        };\n\n        return new Message(RequestIdHelper.Id(\"print\"), Events.PrintingRequest, data, true);\n    }\n}\n\nexport class PrintingResponse\n{\n    constructor(m)\n    {\n        this._success = m.GetSuccessState() == SuccessState.Success;\n        this._m = m;\n    }\n    isSuccess()\n    {\n        return this._success;\n    }\n    getErrorReason()\n    {\n        return this._m.Data.error_reason;\n    }\n    getErrorDetail()\n    {\n        return this._m.Data.error_detail;\n    }\n    getResponseValueWithAttribute(attribute)\n    {\n        return this._m.Data[attribute];\n    }\n}\n\n\n/**\n * This class is a mock printer for the terminal to print Receipts\n */\nexport class Printer {\n    constructor(element) {\n        this.buffer     = [];\n        this.element    = element;\n    }\n\n    print(...args) {\n        this.buffer.push(args.join(' '));\n        this._render();\n    }\n\n    _render() {\n        this.element.innerText = this.buffer.join(`\\n\\n \\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/\\\\/ \\n\\n`);\n        this.element.scrollTop = this.element.scrollHeight;\n    }\n\n    Clear() {\n        this.buffer = [];\n        this._render();\n    }\n}","import {Spi} from \"./src/Spi\";\nimport {Logger} from './src/Logger';\nimport {Printer} from './src/Printing';\n\nwindow.Spi = Spi;\nwindow.Logger = Logger;\nwindow.Printer = Printer;"],"sourceRoot":""}